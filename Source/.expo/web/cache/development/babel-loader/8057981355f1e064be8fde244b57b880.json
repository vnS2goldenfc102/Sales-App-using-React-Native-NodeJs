{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nvar STEP_STATUS = {\n  CURRENT: 'current',\n  FINISHED: 'finished',\n  UNFINISHED: 'unfinished'\n};\nvar defaultStyles = {\n  stepIndicatorSize: 30,\n  currentStepIndicatorSize: 40,\n  separatorStrokeWidth: 3,\n  separatorStrokeUnfinishedWidth: 0,\n  separatorStrokeFinishedWidth: 0,\n  currentStepStrokeWidth: 5,\n  stepStrokeWidth: 0,\n  stepStrokeCurrentColor: '#4aae4f',\n  stepStrokeFinishedColor: '#4aae4f',\n  stepStrokeUnFinishedColor: '#4aae4f',\n  separatorFinishedColor: '#4aae4f',\n  separatorUnFinishedColor: '#a4d4a5',\n  stepIndicatorFinishedColor: '#4aae4f',\n  stepIndicatorUnFinishedColor: '#a4d4a5',\n  stepIndicatorCurrentColor: '#ffffff',\n  stepIndicatorLabelFontSize: 15,\n  currentStepIndicatorLabelFontSize: 15,\n  stepIndicatorLabelCurrentColor: '#000000',\n  stepIndicatorLabelFinishedColor: '#ffffff',\n  stepIndicatorLabelUnFinishedColor: 'rgba(255,255,255,0.5)',\n  labelColor: '#000000',\n  labelSize: 13,\n  labelAlign: 'center',\n  currentStepLabelColor: '#4aae4f'\n};\nvar StepIndicator = function StepIndicator(_ref) {\n  var _ref$currentPosition = _ref.currentPosition,\n    currentPosition = _ref$currentPosition === void 0 ? 0 : _ref$currentPosition,\n    _ref$stepCount = _ref.stepCount,\n    stepCount = _ref$stepCount === void 0 ? 5 : _ref$stepCount,\n    _ref$direction = _ref.direction,\n    direction = _ref$direction === void 0 ? 'horizontal' : _ref$direction,\n    _ref$customStyles = _ref.customStyles,\n    customStylesFromProps = _ref$customStyles === void 0 ? defaultStyles : _ref$customStyles,\n    _ref$labels = _ref.labels,\n    labels = _ref$labels === void 0 ? [] : _ref$labels,\n    onPress = _ref.onPress,\n    renderCustomStepIndicator = _ref.renderStepIndicator,\n    renderLabel = _ref.renderLabel;\n  var _React$useState = React.useState(0),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    width = _React$useState2[0],\n    setWidth = _React$useState2[1];\n  var _React$useState3 = React.useState(0),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    height = _React$useState4[0],\n    setHeight = _React$useState4[1];\n  var _React$useState5 = React.useState(0),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    progressBarSize = _React$useState6[0],\n    setProgressBarSize = _React$useState6[1];\n  var _React$useState7 = React.useState(_objectSpread(_objectSpread({}, defaultStyles), customStylesFromProps)),\n    _React$useState8 = _slicedToArray(_React$useState7, 2),\n    customStyles = _React$useState8[0],\n    setCustomStyles = _React$useState8[1];\n  var progressAnim = React.useRef(new Animated.Value(0)).current;\n  var sizeAnim = React.useRef(new Animated.Value(customStyles.stepIndicatorSize)).current;\n  var staleSizeAnim = React.useRef(new Animated.Value(customStyles.stepIndicatorSize)).current;\n  var borderRadiusAnim = React.useRef(new Animated.Value(customStyles.stepIndicatorSize / 2)).current;\n  var stepPressed = function stepPressed(position) {\n    if (onPress) {\n      onPress(position);\n    }\n  };\n  var effectCustomStyles = function effectCustomStyles() {\n    setCustomStyles(_objectSpread(_objectSpread({}, customStyles), customStylesFromProps));\n  };\n  React.useEffect(effectCustomStyles, [customStylesFromProps]);\n  var effectCurrentPosition = function effectCurrentPosition() {\n    onCurrentPositionChanged(currentPosition);\n  };\n  React.useEffect(effectCurrentPosition, [currentPosition, progressBarSize]);\n  var renderProgressBarBackground = function renderProgressBarBackground() {\n    var progressBarBackgroundStyle = {\n      backgroundColor: customStyles.separatorUnFinishedColor,\n      position: 'absolute'\n    };\n    if (direction === 'vertical') {\n      progressBarBackgroundStyle = _objectSpread(_objectSpread({}, progressBarBackgroundStyle), {}, {\n        left: (width - customStyles.separatorStrokeWidth) / 2,\n        top: height / (2 * stepCount),\n        bottom: height / (2 * stepCount),\n        width: customStyles.separatorStrokeUnfinishedWidth === 0 ? customStyles.separatorStrokeWidth : customStyles.separatorStrokeUnfinishedWidth\n      });\n    } else {\n      progressBarBackgroundStyle = _objectSpread(_objectSpread({}, progressBarBackgroundStyle), {}, {\n        top: (height - customStyles.separatorStrokeWidth) / 2,\n        left: width / (2 * stepCount),\n        right: width / (2 * stepCount),\n        height: customStyles.separatorStrokeUnfinishedWidth === 0 ? customStyles.separatorStrokeWidth : customStyles.separatorStrokeUnfinishedWidth\n      });\n    }\n    return React.createElement(View, {\n      onLayout: function onLayout(event) {\n        if (direction === 'vertical') {\n          setProgressBarSize(event.nativeEvent.layout.height);\n        } else {\n          setProgressBarSize(event.nativeEvent.layout.width);\n        }\n      },\n      style: progressBarBackgroundStyle\n    });\n  };\n  var renderProgressBar = function renderProgressBar() {\n    var progressBarStyle = {\n      backgroundColor: customStyles.separatorFinishedColor,\n      position: 'absolute'\n    };\n    if (direction === 'vertical') {\n      progressBarStyle = _objectSpread(_objectSpread({}, progressBarStyle), {}, {\n        left: (width - customStyles.separatorStrokeWidth) / 2,\n        top: height / (2 * stepCount),\n        bottom: height / (2 * stepCount),\n        width: customStyles.separatorStrokeFinishedWidth === 0 ? customStyles.separatorStrokeWidth : customStyles.separatorStrokeFinishedWidth,\n        height: progressAnim\n      });\n    } else {\n      progressBarStyle = _objectSpread(_objectSpread({}, progressBarStyle), {}, {\n        top: (height - customStyles.separatorStrokeWidth) / 2,\n        left: width / (2 * stepCount),\n        right: width / (2 * stepCount),\n        height: customStyles.separatorStrokeFinishedWidth === 0 ? customStyles.separatorStrokeWidth : customStyles.separatorStrokeFinishedWidth,\n        width: progressAnim\n      });\n    }\n    return React.createElement(Animated.View, {\n      style: progressBarStyle\n    });\n  };\n  var renderStepIndicator = function renderStepIndicator() {\n    var steps = [];\n    var _loop = function _loop(position) {\n      steps.push(React.createElement(TouchableWithoutFeedback, {\n        key: position,\n        onPress: function onPress() {\n          return stepPressed(position);\n        }\n      }, React.createElement(View, {\n        style: [styles.stepContainer, direction === 'vertical' ? {\n          flexDirection: 'column'\n        } : {\n          flexDirection: 'row'\n        }]\n      }, renderStep(position))));\n    };\n    for (var position = 0; position < stepCount; position++) {\n      _loop(position);\n    }\n    return React.createElement(View, {\n      onLayout: function onLayout(event) {\n        setWidth(event.nativeEvent.layout.width);\n        setHeight(event.nativeEvent.layout.height);\n      },\n      style: [styles.stepIndicatorContainer, direction === 'vertical' ? {\n        flexDirection: 'column',\n        width: customStyles.currentStepIndicatorSize\n      } : {\n        flexDirection: 'row',\n        height: customStyles.currentStepIndicatorSize\n      }]\n    }, steps);\n  };\n  var renderStepLabels = function renderStepLabels() {\n    if (!labels || labels.length === 0) {\n      return;\n    }\n    var labelViews = labels.map(function (label, index) {\n      var selectedStepLabelStyle = index === currentPosition ? {\n        color: customStyles.currentStepLabelColor\n      } : {\n        color: customStyles.labelColor\n      };\n      return React.createElement(TouchableWithoutFeedback, {\n        style: styles.stepLabelItem,\n        key: index,\n        onPress: function onPress() {\n          return stepPressed(index);\n        }\n      }, React.createElement(View, {\n        style: styles.stepLabelItem\n      }, renderLabel ? renderLabel({\n        position: index,\n        stepStatus: getStepStatus(index),\n        label: label,\n        currentPosition: currentPosition\n      }) : React.createElement(Text, {\n        style: [styles.stepLabel, selectedStepLabelStyle, {\n          fontSize: customStyles.labelSize,\n          fontFamily: customStyles.labelFontFamily\n        }]\n      }, label)));\n    });\n    return React.createElement(View, {\n      style: [styles.stepLabelsContainer, direction === 'vertical' ? {\n        flexDirection: 'column',\n        paddingHorizontal: 4\n      } : {\n        flexDirection: 'row',\n        paddingVertical: 4\n      }, {\n        alignItems: customStyles.labelAlign\n      }]\n    }, labelViews);\n  };\n  var renderStep = function renderStep(position) {\n    var stepStyle;\n    var indicatorLabelStyle = {};\n    switch (getStepStatus(position)) {\n      case STEP_STATUS.CURRENT:\n        {\n          stepStyle = {\n            backgroundColor: customStyles.stepIndicatorCurrentColor,\n            borderWidth: customStyles.currentStepStrokeWidth,\n            borderColor: customStyles.stepStrokeCurrentColor,\n            height: sizeAnim,\n            width: sizeAnim,\n            borderRadius: borderRadiusAnim,\n            overflow: 'hidden'\n          };\n          indicatorLabelStyle = {\n            overflow: 'hidden',\n            fontSize: customStyles.currentStepIndicatorLabelFontSize,\n            color: customStyles.stepIndicatorLabelCurrentColor\n          };\n          break;\n        }\n      case STEP_STATUS.FINISHED:\n        {\n          stepStyle = {\n            backgroundColor: customStyles.stepIndicatorFinishedColor,\n            borderWidth: customStyles.stepStrokeWidth,\n            borderColor: customStyles.stepStrokeFinishedColor,\n            height: staleSizeAnim,\n            width: staleSizeAnim,\n            borderRadius: customStyles.stepIndicatorSize / 2,\n            overflow: 'hidden'\n          };\n          indicatorLabelStyle = {\n            overflow: 'hidden',\n            fontSize: customStyles.stepIndicatorLabelFontSize,\n            color: customStyles.stepIndicatorLabelFinishedColor\n          };\n          break;\n        }\n      case STEP_STATUS.UNFINISHED:\n        {\n          stepStyle = {\n            backgroundColor: customStyles.stepIndicatorUnFinishedColor,\n            borderWidth: customStyles.stepStrokeWidth,\n            borderColor: customStyles.stepStrokeUnFinishedColor,\n            height: staleSizeAnim,\n            width: staleSizeAnim,\n            borderRadius: customStyles.stepIndicatorSize / 2,\n            overflow: 'hidden'\n          };\n          indicatorLabelStyle = {\n            overflow: 'hidden',\n            fontSize: customStyles.stepIndicatorLabelFontSize,\n            color: customStyles.stepIndicatorLabelUnFinishedColor\n          };\n          break;\n        }\n      default:\n    }\n    return React.createElement(Animated.View, {\n      key: 'step-indicator',\n      style: [styles.step, stepStyle]\n    }, renderCustomStepIndicator ? renderCustomStepIndicator({\n      position: position,\n      stepStatus: getStepStatus(position)\n    }) : React.createElement(Text, {\n      style: indicatorLabelStyle\n    }, \"\".concat(position + 1)));\n  };\n  var getStepStatus = function getStepStatus(stepPosition) {\n    if (stepPosition === currentPosition) {\n      return STEP_STATUS.CURRENT;\n    } else if (stepPosition < currentPosition) {\n      return STEP_STATUS.FINISHED;\n    } else {\n      return STEP_STATUS.UNFINISHED;\n    }\n  };\n  var onCurrentPositionChanged = function onCurrentPositionChanged(position) {\n    if (position > stepCount - 1) {\n      position = stepCount - 1;\n    }\n    var animateToPosition = progressBarSize / (stepCount - 1) * position;\n    sizeAnim.setValue(customStyles.stepIndicatorSize);\n    staleSizeAnim.setValue(customStyles.stepIndicatorSize);\n    borderRadiusAnim.setValue(customStyles.stepIndicatorSize / 2);\n    Animated.sequence([Animated.timing(progressAnim, {\n      toValue: isNaN(animateToPosition) ? 0 : animateToPosition,\n      duration: 200,\n      useNativeDriver: false\n    }), Animated.parallel([Animated.timing(sizeAnim, {\n      toValue: customStyles.currentStepIndicatorSize,\n      duration: 100,\n      useNativeDriver: false\n    }), Animated.timing(borderRadiusAnim, {\n      toValue: customStyles.currentStepIndicatorSize / 2,\n      duration: 100,\n      useNativeDriver: false\n    })])]).start();\n  };\n  return React.createElement(View, {\n    style: [styles.container, direction === 'vertical' ? {\n      flexDirection: 'row',\n      flex: 1\n    } : {\n      flexDirection: 'column'\n    }]\n  }, width !== 0 && React.createElement(React.Fragment, null, renderProgressBarBackground(), renderProgressBar()), renderStepIndicator(), labels && renderStepLabels());\n};\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'rgba(1,0,0,0)'\n  },\n  stepIndicatorContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-around',\n    backgroundColor: 'rgba(1,0,0,0)'\n  },\n  stepLabelsContainer: {\n    justifyContent: 'space-around'\n  },\n  step: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    zIndex: 2\n  },\n  stepContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  stepLabel: {\n    fontSize: 12,\n    textAlign: 'center',\n    fontWeight: '500'\n  },\n  stepLabelItem: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\nexport default React.memo(StepIndicator);","map":{"version":3,"sources":["index.tsx"],"names":["React","STEP_STATUS","CURRENT","FINISHED","UNFINISHED","defaultStyles","stepIndicatorSize","currentStepIndicatorSize","separatorStrokeWidth","separatorStrokeUnfinishedWidth","separatorStrokeFinishedWidth","currentStepStrokeWidth","stepStrokeWidth","stepStrokeCurrentColor","stepStrokeFinishedColor","stepStrokeUnFinishedColor","separatorFinishedColor","separatorUnFinishedColor","stepIndicatorFinishedColor","stepIndicatorUnFinishedColor","stepIndicatorCurrentColor","stepIndicatorLabelFontSize","currentStepIndicatorLabelFontSize","stepIndicatorLabelCurrentColor","stepIndicatorLabelFinishedColor","stepIndicatorLabelUnFinishedColor","labelColor","labelSize","labelAlign","currentStepLabelColor","StepIndicator","currentPosition","stepCount","direction","customStyles","customStylesFromProps","labels","onPress","renderStepIndicator","renderCustomStepIndicator","renderLabel","width","setWidth","useState","height","setHeight","progressBarSize","setProgressBarSize","setCustomStyles","progressAnim","useRef","Animated","Value","current","sizeAnim","staleSizeAnim","borderRadiusAnim","stepPressed","position","effectCustomStyles","useEffect","effectCurrentPosition","onCurrentPositionChanged","renderProgressBarBackground","progressBarBackgroundStyle","backgroundColor","left","top","bottom","right","event","nativeEvent","layout","renderProgressBar","progressBarStyle","steps","push","styles","stepContainer","flexDirection","renderStep","stepIndicatorContainer","renderStepLabels","length","labelViews","map","label","index","selectedStepLabelStyle","color","stepLabelItem","stepStatus","getStepStatus","stepLabel","fontSize","fontFamily","labelFontFamily","stepLabelsContainer","paddingHorizontal","paddingVertical","alignItems","stepStyle","indicatorLabelStyle","borderWidth","borderColor","borderRadius","overflow","step","stepPosition","animateToPosition","setValue","sequence","timing","toValue","isNaN","duration","useNativeDriver","parallel","start","container","flex","create","justifyContent","zIndex","textAlign","fontWeight","memo"],"mappings":"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","sourcesContent":["/* eslint-disable react-native/no-inline-styles */\nimport React from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  Animated,\n  TouchableWithoutFeedback,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\nimport { StepIndicatorProps } from './types';\n\nconst STEP_STATUS = {\n  CURRENT: 'current',\n  FINISHED: 'finished',\n  UNFINISHED: 'unfinished',\n};\n\ninterface DefaultStepIndicatorStyles {\n  stepIndicatorSize: number;\n  currentStepIndicatorSize: number;\n  separatorStrokeWidth: number;\n  separatorStrokeUnfinishedWidth: number;\n  separatorStrokeFinishedWidth: number;\n  currentStepStrokeWidth: number;\n  stepStrokeWidth: number;\n  stepStrokeCurrentColor: string;\n  stepStrokeFinishedColor: string;\n  stepStrokeUnFinishedColor: string;\n  separatorFinishedColor: string;\n  separatorUnFinishedColor: string;\n  stepIndicatorFinishedColor: string;\n  stepIndicatorUnFinishedColor: string;\n  stepIndicatorCurrentColor: string;\n  stepIndicatorLabelFontSize: number;\n  currentStepIndicatorLabelFontSize: number;\n  stepIndicatorLabelCurrentColor: string;\n  stepIndicatorLabelFinishedColor: string;\n  stepIndicatorLabelUnFinishedColor: string;\n  labelColor: string;\n  labelSize: number;\n  labelAlign:\n    | 'center'\n    | 'flex-start'\n    | 'flex-end'\n    | 'stretch'\n    | 'baseline'\n    | undefined;\n  currentStepLabelColor: string;\n  labelFontFamily?: string;\n}\n\nconst defaultStyles: DefaultStepIndicatorStyles = {\n  stepIndicatorSize: 30,\n  currentStepIndicatorSize: 40,\n  separatorStrokeWidth: 3,\n  separatorStrokeUnfinishedWidth: 0,\n  separatorStrokeFinishedWidth: 0,\n  currentStepStrokeWidth: 5,\n  stepStrokeWidth: 0,\n  stepStrokeCurrentColor: '#4aae4f',\n  stepStrokeFinishedColor: '#4aae4f',\n  stepStrokeUnFinishedColor: '#4aae4f',\n  separatorFinishedColor: '#4aae4f',\n  separatorUnFinishedColor: '#a4d4a5',\n  stepIndicatorFinishedColor: '#4aae4f',\n  stepIndicatorUnFinishedColor: '#a4d4a5',\n  stepIndicatorCurrentColor: '#ffffff',\n  stepIndicatorLabelFontSize: 15,\n  currentStepIndicatorLabelFontSize: 15,\n  stepIndicatorLabelCurrentColor: '#000000',\n  stepIndicatorLabelFinishedColor: '#ffffff',\n  stepIndicatorLabelUnFinishedColor: 'rgba(255,255,255,0.5)',\n  labelColor: '#000000',\n  labelSize: 13,\n  labelAlign: 'center',\n  currentStepLabelColor: '#4aae4f',\n};\n\nconst StepIndicator = ({\n  currentPosition = 0,\n  stepCount = 5,\n  direction = 'horizontal',\n  customStyles: customStylesFromProps = defaultStyles,\n  labels = [],\n  onPress,\n  renderStepIndicator: renderCustomStepIndicator,\n  renderLabel,\n}: StepIndicatorProps) => {\n  const [width, setWidth] = React.useState<number>(0);\n  const [height, setHeight] = React.useState<number>(0);\n  const [progressBarSize, setProgressBarSize] = React.useState<number>(0);\n  const [customStyles, setCustomStyles] = React.useState<\n    DefaultStepIndicatorStyles\n  >({\n    ...defaultStyles,\n    ...customStylesFromProps,\n  });\n\n  const progressAnim = React.useRef(new Animated.Value(0)).current;\n  const sizeAnim = React.useRef(\n    new Animated.Value(customStyles.stepIndicatorSize)\n  ).current;\n  const staleSizeAnim = React.useRef(\n    new Animated.Value(customStyles.stepIndicatorSize)\n  ).current;\n  const borderRadiusAnim = React.useRef(\n    new Animated.Value(customStyles.stepIndicatorSize / 2)\n  ).current;\n\n  const stepPressed = (position: number) => {\n    if (onPress) {\n      onPress(position);\n    }\n  };\n\n  const effectCustomStyles = () => {\n    setCustomStyles({ ...customStyles, ...customStylesFromProps });\n  };\n  React.useEffect(effectCustomStyles, [customStylesFromProps]);\n\n  const effectCurrentPosition = () => {\n    onCurrentPositionChanged(currentPosition);\n  };\n  React.useEffect(effectCurrentPosition, [currentPosition, progressBarSize]);\n\n  const renderProgressBarBackground = () => {\n    let progressBarBackgroundStyle: ViewStyle = {\n      backgroundColor: customStyles.separatorUnFinishedColor,\n      position: 'absolute',\n    };\n    if (direction === 'vertical') {\n      progressBarBackgroundStyle = {\n        ...progressBarBackgroundStyle,\n        left: (width - customStyles.separatorStrokeWidth) / 2,\n        top: height / (2 * stepCount),\n        bottom: height / (2 * stepCount),\n        width:\n          customStyles.separatorStrokeUnfinishedWidth === 0\n            ? customStyles.separatorStrokeWidth\n            : customStyles.separatorStrokeUnfinishedWidth,\n      };\n    } else {\n      progressBarBackgroundStyle = {\n        ...progressBarBackgroundStyle,\n        top: (height - customStyles.separatorStrokeWidth) / 2,\n        left: width / (2 * stepCount),\n        right: width / (2 * stepCount),\n        height:\n          customStyles.separatorStrokeUnfinishedWidth === 0\n            ? customStyles.separatorStrokeWidth\n            : customStyles.separatorStrokeUnfinishedWidth,\n      };\n    }\n    return (\n      <View\n        onLayout={(event) => {\n          if (direction === 'vertical') {\n            setProgressBarSize(event.nativeEvent.layout.height);\n          } else {\n            setProgressBarSize(event.nativeEvent.layout.width);\n          }\n        }}\n        style={progressBarBackgroundStyle}\n      />\n    );\n  };\n\n  const renderProgressBar = () => {\n    let progressBarStyle: any = {\n      backgroundColor: customStyles.separatorFinishedColor,\n      position: 'absolute',\n    };\n    if (direction === 'vertical') {\n      progressBarStyle = {\n        ...progressBarStyle,\n        left: (width - customStyles.separatorStrokeWidth) / 2,\n        top: height / (2 * stepCount),\n        bottom: height / (2 * stepCount),\n        width:\n          customStyles.separatorStrokeFinishedWidth === 0\n            ? customStyles.separatorStrokeWidth\n            : customStyles.separatorStrokeFinishedWidth,\n        height: progressAnim,\n      };\n    } else {\n      progressBarStyle = {\n        ...progressBarStyle,\n        top: (height - customStyles.separatorStrokeWidth) / 2,\n        left: width / (2 * stepCount),\n        right: width / (2 * stepCount),\n        height:\n          customStyles.separatorStrokeFinishedWidth === 0\n            ? customStyles.separatorStrokeWidth\n            : customStyles.separatorStrokeFinishedWidth,\n        width: progressAnim,\n      };\n    }\n    return <Animated.View style={progressBarStyle} />;\n  };\n\n  const renderStepIndicator = () => {\n    let steps = [];\n    for (let position = 0; position < stepCount; position++) {\n      steps.push(\n        <TouchableWithoutFeedback\n          key={position}\n          onPress={() => stepPressed(position)}\n        >\n          <View\n            style={[\n              styles.stepContainer,\n              direction === 'vertical'\n                ? { flexDirection: 'column' }\n                : { flexDirection: 'row' },\n            ]}\n          >\n            {renderStep(position)}\n          </View>\n        </TouchableWithoutFeedback>\n      );\n    }\n    return (\n      <View\n        onLayout={(event) => {\n          setWidth(event.nativeEvent.layout.width);\n          setHeight(event.nativeEvent.layout.height);\n        }}\n        style={[\n          styles.stepIndicatorContainer,\n          direction === 'vertical'\n            ? {\n                flexDirection: 'column',\n                width: customStyles.currentStepIndicatorSize,\n              }\n            : {\n                flexDirection: 'row',\n                height: customStyles.currentStepIndicatorSize,\n              },\n        ]}\n      >\n        {steps}\n      </View>\n    );\n  };\n\n  const renderStepLabels = () => {\n    if (!labels || labels.length === 0) {\n      return;\n    }\n    var labelViews = labels.map((label, index) => {\n      const selectedStepLabelStyle =\n        index === currentPosition\n          ? { color: customStyles.currentStepLabelColor }\n          : { color: customStyles.labelColor };\n      return (\n        <TouchableWithoutFeedback\n          style={styles.stepLabelItem}\n          key={index}\n          onPress={() => stepPressed(index)}\n        >\n          <View style={styles.stepLabelItem}>\n            {renderLabel ? (\n              renderLabel({\n                position: index,\n                stepStatus: getStepStatus(index),\n                label,\n                currentPosition,\n              })\n            ) : (\n              <Text\n                style={[\n                  styles.stepLabel,\n                  selectedStepLabelStyle,\n                  {\n                    fontSize: customStyles.labelSize,\n                    fontFamily: customStyles.labelFontFamily,\n                  },\n                ]}\n              >\n                {label}\n              </Text>\n            )}\n          </View>\n        </TouchableWithoutFeedback>\n      );\n    });\n\n    return (\n      <View\n        style={[\n          styles.stepLabelsContainer,\n          direction === 'vertical'\n            ? { flexDirection: 'column', paddingHorizontal: 4 }\n            : { flexDirection: 'row', paddingVertical: 4 },\n          { alignItems: customStyles.labelAlign },\n        ]}\n      >\n        {labelViews}\n      </View>\n    );\n  };\n\n  const renderStep = (position: number) => {\n    let stepStyle;\n    let indicatorLabelStyle: TextStyle = {};\n    switch (getStepStatus(position)) {\n      case STEP_STATUS.CURRENT: {\n        stepStyle = {\n          backgroundColor: customStyles.stepIndicatorCurrentColor,\n          borderWidth: customStyles.currentStepStrokeWidth,\n          borderColor: customStyles.stepStrokeCurrentColor,\n          height: sizeAnim,\n          width: sizeAnim,\n          borderRadius: borderRadiusAnim,\n          overflow: 'hidden',\n        };\n        indicatorLabelStyle = {\n          overflow: 'hidden',\n          fontSize: customStyles.currentStepIndicatorLabelFontSize,\n          color: customStyles.stepIndicatorLabelCurrentColor,\n        };\n\n        break;\n      }\n      case STEP_STATUS.FINISHED: {\n        stepStyle = {\n          backgroundColor: customStyles.stepIndicatorFinishedColor,\n          borderWidth: customStyles.stepStrokeWidth,\n          borderColor: customStyles.stepStrokeFinishedColor,\n          height: staleSizeAnim,\n          width: staleSizeAnim,\n          borderRadius: customStyles.stepIndicatorSize / 2,\n          overflow: 'hidden',\n        };\n        indicatorLabelStyle = {\n          overflow: 'hidden',\n          fontSize: customStyles.stepIndicatorLabelFontSize,\n          color: customStyles.stepIndicatorLabelFinishedColor,\n        };\n        break;\n      }\n\n      case STEP_STATUS.UNFINISHED: {\n        stepStyle = {\n          backgroundColor: customStyles.stepIndicatorUnFinishedColor,\n          borderWidth: customStyles.stepStrokeWidth,\n          borderColor: customStyles.stepStrokeUnFinishedColor,\n          height: staleSizeAnim,\n          width: staleSizeAnim,\n          borderRadius: customStyles.stepIndicatorSize / 2,\n          overflow: 'hidden',\n        };\n        indicatorLabelStyle = {\n          overflow: 'hidden',\n          fontSize: customStyles.stepIndicatorLabelFontSize,\n          color: customStyles.stepIndicatorLabelUnFinishedColor,\n        };\n        break;\n      }\n      default:\n    }\n\n    return (\n      <Animated.View key={'step-indicator'} style={[styles.step, stepStyle]}>\n        {renderCustomStepIndicator ? (\n          renderCustomStepIndicator({\n            position,\n            stepStatus: getStepStatus(position),\n          })\n        ) : (\n          <Text style={indicatorLabelStyle}>{`${position + 1}`}</Text>\n        )}\n      </Animated.View>\n    );\n  };\n\n  const getStepStatus = (stepPosition: number) => {\n    if (stepPosition === currentPosition) {\n      return STEP_STATUS.CURRENT;\n    } else if (stepPosition < currentPosition) {\n      return STEP_STATUS.FINISHED;\n    } else {\n      return STEP_STATUS.UNFINISHED;\n    }\n  };\n\n  const onCurrentPositionChanged = (position: number) => {\n    if (position > stepCount - 1) {\n      position = stepCount - 1;\n    }\n    const animateToPosition = (progressBarSize / (stepCount - 1)) * position;\n    sizeAnim.setValue(customStyles.stepIndicatorSize);\n    staleSizeAnim.setValue(customStyles.stepIndicatorSize);\n    borderRadiusAnim.setValue(customStyles.stepIndicatorSize / 2);\n    Animated.sequence([\n      Animated.timing(progressAnim, {\n        toValue: isNaN(animateToPosition) ? 0 : animateToPosition,\n        duration: 200,\n        useNativeDriver: false,\n      }),\n      Animated.parallel([\n        Animated.timing(sizeAnim, {\n          toValue: customStyles.currentStepIndicatorSize,\n          duration: 100,\n          useNativeDriver: false,\n        }),\n        Animated.timing(borderRadiusAnim, {\n          toValue: customStyles.currentStepIndicatorSize / 2,\n          duration: 100,\n          useNativeDriver: false,\n        }),\n      ]),\n    ]).start();\n  };\n\n  return (\n    <View\n      style={[\n        styles.container,\n        direction === 'vertical'\n          ? { flexDirection: 'row', flex: 1 }\n          : { flexDirection: 'column' },\n      ]}\n    >\n      {width !== 0 && (\n        <React.Fragment>\n          {renderProgressBarBackground()}\n          {renderProgressBar()}\n        </React.Fragment>\n      )}\n      {renderStepIndicator()}\n      {labels && renderStepLabels()}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'rgba(1,0,0,0)',\n  },\n  stepIndicatorContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-around',\n    backgroundColor: 'rgba(1,0,0,0)',\n  },\n  stepLabelsContainer: {\n    justifyContent: 'space-around',\n  },\n  step: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    zIndex: 2,\n  },\n  stepContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  stepLabel: {\n    fontSize: 12,\n    textAlign: 'center',\n    fontWeight: '500',\n  },\n  stepLabelItem: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nexport default React.memo(StepIndicator);\n"]},"metadata":{},"sourceType":"module"}