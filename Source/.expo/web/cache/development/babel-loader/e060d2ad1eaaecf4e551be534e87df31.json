{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React, { useState } from \"react\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { colors, network } from \"../../constants\";\nimport CustomInput from \"../../components/CustomInput\";\nimport CustomButton from \"../../components/CustomButton\";\nimport CustomAlert from \"../../components/CustomAlert/CustomAlert\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar UpdatePasswordScreen = function UpdatePasswordScreen(_ref) {\n  var navigation = _ref.navigation,\n    route = _ref.route;\n  var userID = route.params.userID;\n  var _useState = useState(\"\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    error = _useState2[0],\n    setError = _useState2[1];\n  var _useState3 = useState(\"\"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    currnetPassword = _useState4[0],\n    setCurrentPassword = _useState4[1];\n  var _useState5 = useState(\"\"),\n    _useState6 = _slicedToArray(_useState5, 2),\n    newPassword = _useState6[0],\n    setNewPassword = _useState6[1];\n  var _useState7 = useState(\"\"),\n    _useState8 = _slicedToArray(_useState7, 2),\n    confirmPassword = _useState8[0],\n    setCconfirmPassword = _useState8[1];\n  var myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  var raw = JSON.stringify({\n    password: currnetPassword,\n    newPassword: newPassword\n  });\n  var requestOptions = {\n    method: \"POST\",\n    headers: myHeaders,\n    body: raw,\n    redirect: \"follow\"\n  };\n  var updatePasswordHandle = function updatePasswordHandle() {\n    console.log(userID);\n    if (currnetPassword == newPassword) {\n      setError(\"You are not allowed to set the previous used password\");\n    } else if (newPassword != confirmPassword) {\n      setError(\"Password not matched\");\n    } else {\n      setError(\"\");\n      fetch(network.serverip + \"/reset-password?id=\" + String(userID), requestOptions).then(function (response) {\n        return response.json();\n      }).then(function (result) {\n        console.log(result);\n        navigation.goBack();\n      }).catch(function (error) {\n        return console.log(\"error\", setError(error.message));\n      });\n    }\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(View, {\n      style: styles.TopBarContainer,\n      children: _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          navigation.goBack();\n        },\n        children: _jsx(Ionicons, {\n          name: \"arrow-back-circle-outline\",\n          size: 30,\n          color: colors.muted\n        })\n      })\n    }), _jsxs(View, {\n      style: styles.screenNameContainer,\n      children: [_jsx(View, {\n        children: _jsx(Text, {\n          style: styles.screenNameText,\n          children: \"Update Password\"\n        })\n      }), _jsx(View, {\n        children: _jsx(Text, {\n          style: styles.screenNameParagraph,\n          children: \"Your new password must be different from previous used password\"\n        })\n      })]\n    }), _jsxs(View, {\n      style: styles.formContainer,\n      children: [_jsx(CustomAlert, {\n        message: error,\n        type: \"error\"\n      }), _jsx(CustomInput, {\n        value: currnetPassword,\n        setValue: setCurrentPassword,\n        placeholder: \"Current Password\",\n        secureTextEntry: true\n      }), _jsx(CustomInput, {\n        value: newPassword,\n        setValue: setNewPassword,\n        placeholder: \"New Password\",\n        secureTextEntry: true\n      }), _jsx(CustomInput, {\n        value: confirmPassword,\n        setValue: setCconfirmPassword,\n        placeholder: \"Confirm New Password\",\n        secureTextEntry: true\n      })]\n    }), _jsx(CustomButton, {\n      text: \"Update Password\",\n      onPress: updatePasswordHandle,\n      radius: 5\n    })]\n  });\n};\nexport default UpdatePasswordScreen;\nvar styles = StyleSheet.create({\n  container: {\n    flexDirecion: \"row\",\n    backgroundColor: colors.light,\n    alignItems: \"center\",\n    padding: 20,\n    flex: 1\n  },\n  TopBarContainer: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"flex-start\",\n    alignItems: \"center\"\n  },\n  screenNameContainer: {\n    marginTop: 10,\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"flex-start\",\n    alignItems: \"flex-start\"\n  },\n  screenNameText: {\n    fontSize: 30,\n    fontWeight: \"800\",\n    color: colors.muted\n  },\n  screenNameParagraph: {\n    marginTop: 5,\n    fontSize: 15\n  },\n  formContainer: {\n    marginTop: 10,\n    marginBottom: 20,\n    justifyContent: \"flex-start\",\n    alignItems: \"center\",\n    display: \"flex\",\n    width: \"100%\",\n    flexDirecion: \"row\"\n  }\n});","map":{"version":3,"names":["React","useState","Ionicons","colors","network","CustomInput","CustomButton","CustomAlert","UpdatePasswordScreen","navigation","route","userID","params","error","setError","currnetPassword","setCurrentPassword","newPassword","setNewPassword","confirmPassword","setCconfirmPassword","myHeaders","Headers","append","raw","JSON","stringify","password","requestOptions","method","headers","body","redirect","updatePasswordHandle","console","log","fetch","serverip","String","then","response","json","result","goBack","catch","message","styles","container","TopBarContainer","muted","screenNameContainer","screenNameText","screenNameParagraph","formContainer","StyleSheet","create","flexDirecion","backgroundColor","light","alignItems","padding","flex","width","display","flexDirection","justifyContent","marginTop","fontSize","fontWeight","color","marginBottom"],"sources":["D:/React Native/EasyBuy-Ecommerce-App/Source/screens/auth/UpdatePasswordScreen.js"],"sourcesContent":["import { StyleSheet, Text, TouchableOpacity, View } from \"react-native\";\r\nimport React, { useState } from \"react\";\r\nimport { Ionicons } from \"@expo/vector-icons\";\r\nimport { colors, network } from \"../../constants\";\r\nimport CustomInput from \"../../components/CustomInput\";\r\nimport CustomButton from \"../../components/CustomButton\";\r\nimport CustomAlert from \"../../components/CustomAlert/CustomAlert\";\r\n\r\nconst UpdatePasswordScreen = ({ navigation, route }) => {\r\n  const { userID } = route.params;\r\n  const [error, setError] = useState(\"\");\r\n  const [currnetPassword, setCurrentPassword] = useState(\"\");\r\n  const [newPassword, setNewPassword] = useState(\"\");\r\n  const [confirmPassword, setCconfirmPassword] = useState(\"\");\r\n\r\n  var myHeaders = new Headers();\r\n  myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n  var raw = JSON.stringify({\r\n    password: currnetPassword,\r\n    newPassword: newPassword,\r\n  });\r\n\r\n  var requestOptions = {\r\n    method: \"POST\",\r\n    headers: myHeaders,\r\n    body: raw,\r\n    redirect: \"follow\",\r\n  };\r\n\r\n  const updatePasswordHandle = () => {\r\n    console.log(userID);\r\n    if (currnetPassword == newPassword) {\r\n      setError(\"You are not allowed to set the previous used password\");\r\n    } else if (newPassword != confirmPassword) {\r\n      setError(\"Password not matched\");\r\n    } else {\r\n      setError(\"\");\r\n      fetch(\r\n        network.serverip + \"/reset-password?id=\" + String(userID),\r\n        requestOptions\r\n      )\r\n        .then((response) => response.json())\r\n        .then((result) => {\r\n          console.log(result);\r\n          navigation.goBack();\r\n        })\r\n        .catch((error) => console.log(\"error\", setError(error.message)));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.TopBarContainer}>\r\n        <TouchableOpacity\r\n          onPress={() => {\r\n            navigation.goBack();\r\n          }}\r\n        >\r\n          <Ionicons\r\n            name=\"arrow-back-circle-outline\"\r\n            size={30}\r\n            color={colors.muted}\r\n          />\r\n        </TouchableOpacity>\r\n      </View>\r\n      <View style={styles.screenNameContainer}>\r\n        <View>\r\n          <Text style={styles.screenNameText}>Update Password</Text>\r\n        </View>\r\n        <View>\r\n          <Text style={styles.screenNameParagraph}>\r\n            Your new password must be different from previous used password\r\n          </Text>\r\n        </View>\r\n      </View>\r\n      <View style={styles.formContainer}>\r\n        <CustomAlert message={error} type={\"error\"} />\r\n        <CustomInput\r\n          value={currnetPassword}\r\n          setValue={setCurrentPassword}\r\n          placeholder={\"Current Password\"}\r\n          secureTextEntry={true}\r\n        />\r\n        <CustomInput\r\n          value={newPassword}\r\n          setValue={setNewPassword}\r\n          placeholder={\"New Password\"}\r\n          secureTextEntry={true}\r\n        />\r\n        <CustomInput\r\n          value={confirmPassword}\r\n          setValue={setCconfirmPassword}\r\n          placeholder={\"Confirm New Password\"}\r\n          secureTextEntry={true}\r\n        />\r\n      </View>\r\n      <CustomButton\r\n        text={\"Update Password\"}\r\n        onPress={updatePasswordHandle}\r\n        radius={5}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default UpdatePasswordScreen;\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flexDirecion: \"row\",\r\n    backgroundColor: colors.light,\r\n    alignItems: \"center\",\r\n    padding: 20,\r\n    flex: 1,\r\n  },\r\n  TopBarContainer: {\r\n    width: \"100%\",\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"flex-start\",\r\n    alignItems: \"center\",\r\n  },\r\n  screenNameContainer: {\r\n    marginTop: 10,\r\n    width: \"100%\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"flex-start\",\r\n    alignItems: \"flex-start\",\r\n  },\r\n  screenNameText: {\r\n    fontSize: 30,\r\n    fontWeight: \"800\",\r\n    color: colors.muted,\r\n  },\r\n  screenNameParagraph: {\r\n    marginTop: 5,\r\n    fontSize: 15,\r\n  },\r\n  formContainer: {\r\n    marginTop: 10,\r\n    marginBottom: 20,\r\n    justifyContent: \"flex-start\",\r\n    alignItems: \"center\",\r\n    display: \"flex\",\r\n    width: \"100%\",\r\n    flexDirecion: \"row\",\r\n  },\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}