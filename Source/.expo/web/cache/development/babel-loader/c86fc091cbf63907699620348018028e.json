{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nvar _stateToPropMappings;\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar _UIManagerAny$getView, _UIManagerAny$getView2, _UIManagerAny$getCons;\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Touchable from \"react-native-web/dist/exports/Touchable\";\nimport UIManager from \"react-native-web/dist/exports/UIManager\";\nimport DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nimport deepEqual from 'lodash/isEqual';\nimport RNGestureHandlerModule from \"../RNGestureHandlerModule\";\nimport { State } from \"../State\";\nimport { handlerIDToTag, getNextHandlerTag } from \"./handlersRegistry\";\nimport { filterConfig, findNodeHandle } from \"./gestureHandlerCommon\";\nvar UIManagerAny = UIManager;\nvar customGHEventsConfig = {\n  onGestureHandlerEvent: {\n    registrationName: 'onGestureHandlerEvent'\n  },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange'\n  }\n};\nUIManagerAny.genericDirectEventTypes = _objectSpread(_objectSpread({}, UIManagerAny.genericDirectEventTypes), customGHEventsConfig);\nvar UIManagerConstants = (_UIManagerAny$getView = (_UIManagerAny$getView2 = UIManagerAny.getViewManagerConfig) === null || _UIManagerAny$getView2 === void 0 ? void 0 : _UIManagerAny$getView2.call(UIManagerAny, 'getConstants')) !== null && _UIManagerAny$getView !== void 0 ? _UIManagerAny$getView : (_UIManagerAny$getCons = UIManagerAny.getConstants) === null || _UIManagerAny$getCons === void 0 ? void 0 : _UIManagerAny$getCons.call(UIManagerAny);\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = _objectSpread(_objectSpread({}, UIManagerConstants.genericDirectEventTypes), customGHEventsConfig);\n}\nvar _UIManagerAny$setJSRe = UIManagerAny.setJSResponder,\n  oldSetJSResponder = _UIManagerAny$setJSRe === void 0 ? function () {} : _UIManagerAny$setJSRe,\n  _UIManagerAny$clearJS = UIManagerAny.clearJSResponder,\n  oldClearJSResponder = _UIManagerAny$clearJS === void 0 ? function () {} : _UIManagerAny$clearJS;\nUIManagerAny.setJSResponder = function (tag, blockNativeResponder) {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = function () {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\nvar allowTouches = true;\nvar DEV_ON_ANDROID = __DEV__ && Platform.OS === 'android';\nif (DEV_ON_ANDROID) {\n  DeviceEventEmitter.addListener('toggleElementInspector', function () {\n    allowTouches = !allowTouches;\n  });\n}\nfunction hasUnresolvedRefs(props) {\n  var extract = function extract(refs) {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some(function (r) {\n      return r && r.current === null;\n    });\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\nvar stateToPropMappings = (_stateToPropMappings = {}, _defineProperty2(_stateToPropMappings, State.UNDETERMINED, undefined), _defineProperty2(_stateToPropMappings, State.BEGAN, 'onBegan'), _defineProperty2(_stateToPropMappings, State.FAILED, 'onFailed'), _defineProperty2(_stateToPropMappings, State.CANCELLED, 'onCancelled'), _defineProperty2(_stateToPropMappings, State.ACTIVE, 'onActivated'), _defineProperty2(_stateToPropMappings, State.END, 'onEnded'), _stateToPropMappings);\nexport default function createHandler(_ref) {\n  var name = _ref.name,\n    _ref$allowedProps = _ref.allowedProps,\n    allowedProps = _ref$allowedProps === void 0 ? [] : _ref$allowedProps,\n    _ref$config = _ref.config,\n    config = _ref$config === void 0 ? {} : _ref$config,\n    transformProps = _ref.transformProps,\n    _ref$customNativeProp = _ref.customNativeProps,\n    customNativeProps = _ref$customNativeProp === void 0 ? [] : _ref$customNativeProp;\n  var Handler = function (_React$Component) {\n    _inherits(Handler, _React$Component);\n    var _super = _createSuper(Handler);\n    function Handler(props) {\n      var _this;\n      _classCallCheck(this, Handler);\n      _this = _super.call(this, props);\n      _defineProperty(_assertThisInitialized(_this), \"handlerTag\", void 0);\n      _defineProperty(_assertThisInitialized(_this), \"config\", void 0);\n      _defineProperty(_assertThisInitialized(_this), \"propsRef\", void 0);\n      _defineProperty(_assertThisInitialized(_this), \"viewNode\", void 0);\n      _defineProperty(_assertThisInitialized(_this), \"viewTag\", void 0);\n      _defineProperty(_assertThisInitialized(_this), \"updateEnqueued\", null);\n      _defineProperty(_assertThisInitialized(_this), \"inspectorToggleListener\", void 0);\n      _defineProperty(_assertThisInitialized(_this), \"onGestureHandlerEvent\", function (event) {\n        if (event.nativeEvent.handlerTag === _this.handlerTag) {\n          var _this$props$onGesture, _this$props;\n          (_this$props$onGesture = (_this$props = _this.props).onGestureEvent) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props, event);\n        } else {\n          var _this$props$onGesture2, _this$props2;\n          (_this$props$onGesture2 = (_this$props2 = _this.props).onGestureHandlerEvent) === null || _this$props$onGesture2 === void 0 ? void 0 : _this$props$onGesture2.call(_this$props2, event);\n        }\n      });\n      _defineProperty(_assertThisInitialized(_this), \"onGestureHandlerStateChange\", function (event) {\n        if (event.nativeEvent.handlerTag === _this.handlerTag) {\n          var _this$props$onHandler, _this$props3;\n          (_this$props$onHandler = (_this$props3 = _this.props).onHandlerStateChange) === null || _this$props$onHandler === void 0 ? void 0 : _this$props$onHandler.call(_this$props3, event);\n          var state = event.nativeEvent.state;\n          var stateEventName = stateToPropMappings[state];\n          var eventHandler = stateEventName && _this.props[stateEventName];\n          if (eventHandler && typeof eventHandler === 'function') {\n            eventHandler(event);\n          }\n        } else {\n          var _this$props$onGesture3, _this$props4;\n          (_this$props$onGesture3 = (_this$props4 = _this.props).onGestureHandlerStateChange) === null || _this$props$onGesture3 === void 0 ? void 0 : _this$props$onGesture3.call(_this$props4, event);\n        }\n      });\n      _defineProperty(_assertThisInitialized(_this), \"refHandler\", function (node) {\n        _this.viewNode = node;\n        var child = React.Children.only(_this.props.children);\n        var ref = child.ref;\n        if (ref !== null) {\n          if (typeof ref === 'function') {\n            ref(node);\n          } else {\n            ref.current = node;\n          }\n        }\n      });\n      _defineProperty(_assertThisInitialized(_this), \"createGestureHandler\", function (newConfig) {\n        _this.config = newConfig;\n        RNGestureHandlerModule.createGestureHandler(name, _this.handlerTag, newConfig);\n      });\n      _defineProperty(_assertThisInitialized(_this), \"attachGestureHandler\", function (newViewTag) {\n        _this.viewTag = newViewTag;\n        if (Platform.OS === 'web') {\n          RNGestureHandlerModule.attachGestureHandler(_this.handlerTag, newViewTag, false, _this.propsRef);\n        } else {\n          RNGestureHandlerModule.attachGestureHandler(_this.handlerTag, newViewTag, false);\n        }\n      });\n      _defineProperty(_assertThisInitialized(_this), \"updateGestureHandler\", function (newConfig) {\n        _this.config = newConfig;\n        RNGestureHandlerModule.updateGestureHandler(_this.handlerTag, newConfig);\n      });\n      _this.handlerTag = getNextHandlerTag();\n      _this.config = {};\n      _this.propsRef = React.createRef();\n      _this.state = {\n        allowTouches: allowTouches\n      };\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(\"Handler with ID \\\"\" + props.id + \"\\\" already registered\");\n        }\n        handlerIDToTag[props.id] = _this.handlerTag;\n      }\n      return _this;\n    }\n    _createClass(Handler, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var _this2 = this;\n        var props = this.props;\n        if (DEV_ON_ANDROID) {\n          this.inspectorToggleListener = DeviceEventEmitter.addListener('toggleElementInspector', function () {\n            _this2.setState(function (_) {\n              return {\n                allowTouches: allowTouches\n              };\n            });\n            _this2.update();\n          });\n        }\n        if (hasUnresolvedRefs(props)) {\n          this.updateEnqueued = setImmediate(function () {\n            _this2.updateEnqueued = null;\n            _this2.update();\n          });\n        }\n        this.createGestureHandler(filterConfig(transformProps ? transformProps(this.props) : this.props, [].concat(_toConsumableArray(allowedProps), _toConsumableArray(customNativeProps)), config));\n        this.attachGestureHandler(findNodeHandle(this.viewNode));\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate() {\n        var viewTag = findNodeHandle(this.viewNode);\n        if (this.viewTag !== viewTag) {\n          this.attachGestureHandler(viewTag);\n        }\n        this.update();\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        var _this$inspectorToggle;\n        (_this$inspectorToggle = this.inspectorToggleListener) === null || _this$inspectorToggle === void 0 ? void 0 : _this$inspectorToggle.remove();\n        RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n        if (this.updateEnqueued) {\n          clearImmediate(this.updateEnqueued);\n        }\n        var handlerID = this.props.id;\n        if (handlerID) {\n          delete handlerIDToTag[handlerID];\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update() {\n        var newConfig = filterConfig(transformProps ? transformProps(this.props) : this.props, [].concat(_toConsumableArray(allowedProps), _toConsumableArray(customNativeProps)), config);\n        if (!deepEqual(this.config, newConfig)) {\n          this.updateGestureHandler(newConfig);\n        }\n      }\n    }, {\n      key: \"setNativeProps\",\n      value: function setNativeProps(updates) {\n        var mergedProps = _objectSpread(_objectSpread({}, this.props), updates);\n        var newConfig = filterConfig(transformProps ? transformProps(mergedProps) : mergedProps, [].concat(_toConsumableArray(allowedProps), _toConsumableArray(customNativeProps)), config);\n        this.updateGestureHandler(newConfig);\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var gestureEventHandler = this.onGestureHandlerEvent;\n        var _this$props5 = this.props,\n          onGestureEvent = _this$props5.onGestureEvent,\n          onGestureHandlerEvent = _this$props5.onGestureHandlerEvent;\n        if (onGestureEvent && typeof onGestureEvent !== 'function') {\n          if (onGestureHandlerEvent) {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n          gestureEventHandler = onGestureEvent;\n        } else {\n          if (onGestureHandlerEvent && typeof onGestureHandlerEvent !== 'function') {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n        }\n        var gestureStateEventHandler = this.onGestureHandlerStateChange;\n        var _this$props6 = this.props,\n          onHandlerStateChange = _this$props6.onHandlerStateChange,\n          onGestureHandlerStateChange = _this$props6.onGestureHandlerStateChange;\n        if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n          if (onGestureHandlerStateChange) {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n          gestureStateEventHandler = onHandlerStateChange;\n        } else {\n          if (onGestureHandlerStateChange && typeof onGestureHandlerStateChange !== 'function') {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n        }\n        var events = {\n          onGestureHandlerEvent: this.state.allowTouches ? gestureEventHandler : undefined,\n          onGestureHandlerStateChange: this.state.allowTouches ? gestureStateEventHandler : undefined\n        };\n        this.propsRef.current = events;\n        var child = React.Children.only(this.props.children);\n        var grandChildren = child.props.children;\n        if (Touchable.TOUCH_TARGET_DEBUG && child.type && (child.type === 'RNGestureHandlerButton' || child.type.name === 'View' || child.type.displayName === 'View')) {\n          grandChildren = React.Children.toArray(grandChildren);\n          grandChildren.push(Touchable.renderDebugView({\n            color: 'mediumspringgreen',\n            hitSlop: child.props.hitSlop\n          }));\n        }\n        return React.cloneElement(child, _objectSpread({\n          ref: this.refHandler,\n          collapsable: false\n        }, events), grandChildren);\n      }\n    }]);\n    return Handler;\n  }(React.Component);\n  _defineProperty(Handler, \"displayName\", name);\n  return Handler;\n}","map":{"version":3,"sources":["createHandler.ts"],"names":["React","deepEqual","RNGestureHandlerModule","State","handlerIDToTag","getNextHandlerTag","filterConfig","findNodeHandle","UIManagerAny","UIManager","customGHEventsConfig","onGestureHandlerEvent","registrationName","onGestureHandlerStateChange","genericDirectEventTypes","UIManagerConstants","getViewManagerConfig","getConstants","setJSResponder","oldSetJSResponder","clearJSResponder","oldClearJSResponder","tag","blockNativeResponder","handleSetJSResponder","handleClearJSResponder","allowTouches","DEV_ON_ANDROID","__DEV__","Platform","OS","DeviceEventEmitter","addListener","hasUnresolvedRefs","props","extract","refs","Array","isArray","current","some","r","stateToPropMappings","UNDETERMINED","undefined","BEGAN","FAILED","CANCELLED","ACTIVE","END","createHandler","name","allowedProps","config","transformProps","customNativeProps","Handler","Component","constructor","handlerTag","propsRef","createRef","state","id","Error","componentDidMount","inspectorToggleListener","setState","_","update","updateEnqueued","setImmediate","createGestureHandler","attachGestureHandler","viewNode","componentDidUpdate","viewTag","componentWillUnmount","remove","dropGestureHandler","clearImmediate","handlerID","event","nativeEvent","onGestureEvent","onHandlerStateChange","stateEventName","eventHandler","node","child","Children","only","children","ref","newConfig","newViewTag","updateGestureHandler","setNativeProps","updates","mergedProps","render","gestureEventHandler","gestureStateEventHandler","events","grandChildren","Touchable","TOUCH_TARGET_DEBUG","type","displayName","toArray","push","renderDebugView","color","hitSlop","cloneElement","refHandler","collapsable"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  Touchable,\n  UIManager,\n  DeviceEventEmitter,\n  EmitterSubscription,\n} from 'react-native';\n// @ts-ignore - it isn't typed by TS & don't have definitelyTyped types\nimport deepEqual from 'lodash/isEqual';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport type RNGestureHandlerModuleWeb from '../RNGestureHandlerModule.web';\nimport { State } from '../State';\nimport { handlerIDToTag, getNextHandlerTag } from './handlersRegistry';\n\nimport {\n  BaseGestureHandlerProps,\n  filterConfig,\n  GestureEvent,\n  HandlerStateChangeEvent,\n  findNodeHandle,\n} from './gestureHandlerCommon';\nimport { ValueOf } from '../typeUtils';\n\nconst UIManagerAny = UIManager as any;\n\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n};\n\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManagerAny.genericDirectEventTypes = {\n  ...UIManagerAny.genericDirectEventTypes,\n  ...customGHEventsConfig,\n};\n// In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getViewManagerConfig('getConstants') or in older RN UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\nconst UIManagerConstants =\n  UIManagerAny.getViewManagerConfig?.('getConstants') ??\n  UIManagerAny.getConstants?.();\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = {\n    ...UIManagerConstants.genericDirectEventTypes,\n    ...customGHEventsConfig,\n  };\n}\n\n// Wrap JS responder calls and notify gesture handler manager\nconst {\n  setJSResponder: oldSetJSResponder = () => {\n    //no operation\n  },\n  clearJSResponder: oldClearJSResponder = () => {\n    //no operation\n  },\n} = UIManagerAny;\nUIManagerAny.setJSResponder = (tag: number, blockNativeResponder: boolean) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet allowTouches = true;\nconst DEV_ON_ANDROID = __DEV__ && Platform.OS === 'android';\n// Toggled inspector blocks touch events in order to allow inspecting on Android\n// This needs to be a global variable in order to set initial state for `allowTouches` property in Handler component\nif (DEV_ON_ANDROID) {\n  DeviceEventEmitter.addListener('toggleElementInspector', () => {\n    allowTouches = !allowTouches;\n  });\n}\n\ntype HandlerProps<T extends Record<string, unknown>> = Readonly<\n  React.PropsWithChildren<BaseGestureHandlerProps<T>>\n>;\nfunction hasUnresolvedRefs<T extends Record<string, unknown>>(\n  props: HandlerProps<T>\n) {\n  // TODO(TS) - add type for extract arg\n  const extract = (refs: any | any[]) => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some((r) => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded',\n} as const;\n\ntype CreateHandlerArgs<\n  HandlerPropsT extends Record<string, unknown>\n> = Readonly<{\n  name: string;\n  allowedProps: Readonly<Extract<keyof HandlerPropsT, string>[]>;\n  config: Readonly<Record<string, unknown>>;\n  transformProps?: (props: HandlerPropsT) => HandlerPropsT;\n  customNativeProps?: Readonly<string[]>;\n}>;\n\n// TODO(TS) fix event types\ntype InternalEventHandlers = {\n  onGestureHandlerEvent?: (event: any) => void;\n  onGestureHandlerStateChange?: (event: any) => void;\n};\n\n// TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\nexport default function createHandler<\n  T extends BaseGestureHandlerProps<U>,\n  U extends Record<string, unknown>\n>({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = [],\n}: CreateHandlerArgs<T>): React.ComponentType<T & React.RefAttributes<any>> {\n  interface HandlerState {\n    allowTouches: boolean;\n  }\n  class Handler extends React.Component<\n    T & InternalEventHandlers,\n    HandlerState\n  > {\n    static displayName = name;\n\n    private handlerTag: number;\n    private config: Record<string, unknown>;\n    private propsRef: React.MutableRefObject<unknown>;\n    private viewNode: any;\n    private viewTag?: number;\n    private updateEnqueued: ReturnType<typeof setImmediate> | null = null;\n    private inspectorToggleListener?: EmitterSubscription;\n\n    constructor(props: T & InternalEventHandlers) {\n      super(props);\n      this.handlerTag = getNextHandlerTag();\n      this.config = {};\n      this.propsRef = React.createRef();\n      this.state = { allowTouches };\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n    }\n\n    componentDidMount() {\n      const props: HandlerProps<U> = this.props;\n\n      if (DEV_ON_ANDROID) {\n        this.inspectorToggleListener = DeviceEventEmitter.addListener(\n          'toggleElementInspector',\n          () => {\n            this.setState((_) => ({ allowTouches }));\n            this.update();\n          }\n        );\n      }\n      if (hasUnresolvedRefs(props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // setImmediate. This makes it so update() function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        this.updateEnqueued = setImmediate(() => {\n          this.updateEnqueued = null;\n          this.update();\n        });\n      }\n\n      this.createGestureHandler(\n        filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        )\n      );\n\n      this.attachGestureHandler(findNodeHandle(this.viewNode) as number); // TODO(TS) - check if this can be null\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag as number); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n      }\n      this.update();\n    }\n\n    componentWillUnmount() {\n      this.inspectorToggleListener?.remove();\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n      if (this.updateEnqueued) {\n        clearImmediate(this.updateEnqueued);\n      }\n      // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n      const handlerID: string | undefined = this.props.id;\n      if (handlerID) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete handlerIDToTag[handlerID];\n      }\n    }\n\n    private onGestureHandlerEvent = (event: GestureEvent<U>) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        this.props.onGestureEvent?.(event);\n      } else {\n        this.props.onGestureHandlerEvent?.(event);\n      }\n    };\n\n    // TODO(TS) - make sure this is right type for event\n    private onGestureHandlerStateChange = (\n      event: HandlerStateChangeEvent<U>\n    ) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        this.props.onHandlerStateChange?.(event);\n\n        const state: ValueOf<typeof State> = event.nativeEvent.state;\n        const stateEventName = stateToPropMappings[state];\n        const eventHandler = stateEventName && this.props[stateEventName];\n        if (eventHandler && typeof eventHandler === 'function') {\n          eventHandler(event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange?.(event);\n      }\n    };\n\n    private refHandler = (node: any) => {\n      this.viewNode = node;\n\n      const child = React.Children.only(this.props.children);\n      // TODO(TS) fix ref type\n      const { ref }: any = child;\n      if (ref !== null) {\n        if (typeof ref === 'function') {\n          ref(node);\n        } else {\n          ref.current = node;\n        }\n      }\n    };\n\n    private createGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.createGestureHandler(\n        name,\n        this.handlerTag,\n        newConfig\n      );\n    };\n\n    private attachGestureHandler = (newViewTag: number) => {\n      this.viewTag = newViewTag;\n\n      if (Platform.OS === 'web') {\n        // typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n        (RNGestureHandlerModule.attachGestureHandler as typeof RNGestureHandlerModuleWeb.attachGestureHandler)(\n          this.handlerTag,\n          newViewTag,\n          false,\n          this.propsRef\n        );\n      } else {\n        RNGestureHandlerModule.attachGestureHandler(\n          this.handlerTag,\n          newViewTag,\n          false\n        );\n      }\n    };\n\n    private updateGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n    };\n\n    private update() {\n      const newConfig = filterConfig(\n        transformProps ? transformProps(this.props) : this.props,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      if (!deepEqual(this.config, newConfig)) {\n        this.updateGestureHandler(newConfig);\n      }\n    }\n\n    setNativeProps(updates: any) {\n      const mergedProps = { ...this.props, ...updates };\n      const newConfig = filterConfig(\n        transformProps ? transformProps(mergedProps) : mergedProps,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      this.updateGestureHandler(newConfig);\n    }\n\n    render() {\n      let gestureEventHandler = this.onGestureHandlerEvent;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureEventHandlers = {\n        onGestureEvent?: BaseGestureHandlerProps<U>['onGestureEvent'];\n        onGestureHandlerEvent?: InternalEventHandlers['onGestureHandlerEvent'];\n      };\n      const {\n        onGestureEvent,\n        onGestureHandlerEvent,\n      }: OnGestureEventHandlers = this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (\n          onGestureHandlerEvent &&\n          typeof onGestureHandlerEvent !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureStateChangeHandlers = {\n        onHandlerStateChange?: BaseGestureHandlerProps<U>['onHandlerStateChange'];\n        onGestureHandlerStateChange?: InternalEventHandlers['onGestureHandlerStateChange'];\n      };\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange,\n      }: OnGestureStateChangeHandlers = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (\n          onGestureHandlerStateChange &&\n          typeof onGestureHandlerStateChange !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n      const events = {\n        onGestureHandlerEvent: this.state.allowTouches\n          ? gestureEventHandler\n          : undefined,\n        onGestureHandlerStateChange: this.state.allowTouches\n          ? gestureStateEventHandler\n          : undefined,\n      };\n\n      this.propsRef.current = events;\n\n      const child: any = React.Children.only(this.props.children);\n      let grandChildren = child.props.children;\n      if (\n        Touchable.TOUCH_TARGET_DEBUG &&\n        child.type &&\n        (child.type === 'RNGestureHandlerButton' ||\n          child.type.name === 'View' ||\n          child.type.displayName === 'View')\n      ) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(\n          Touchable.renderDebugView({\n            color: 'mediumspringgreen',\n            hitSlop: child.props.hitSlop,\n          })\n        );\n      }\n\n      return React.cloneElement(\n        child,\n        {\n          ref: this.refHandler,\n          collapsable: false,\n          ...events,\n        },\n        grandChildren\n      );\n    }\n  }\n  return Handler;\n}\n"]},"metadata":{},"sourceType":"module"}