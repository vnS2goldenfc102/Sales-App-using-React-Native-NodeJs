{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nvar _Reanimated$default$c, _Reanimated$default;\nimport React, { useEffect, useRef } from 'react';\nimport { BaseGesture, CALLBACK_TYPE } from \"./gesture\";\nimport { Reanimated } from \"./reanimatedWrapper\";\nimport { registerHandler, unregisterHandler } from \"../handlersRegistry\";\nimport RNGestureHandlerModule from \"../../RNGestureHandlerModule\";\nimport { baseGestureHandlerWithMonitorProps, filterConfig, findNodeHandle } from \"../gestureHandlerCommon\";\nimport { GestureStateManager } from \"./gestureStateManager\";\nimport { flingGestureHandlerProps } from \"../FlingGestureHandler\";\nimport { forceTouchGestureHandlerProps } from \"../ForceTouchGestureHandler\";\nimport { longPressGestureHandlerProps } from \"../LongPressGestureHandler\";\nimport { panGestureHandlerProps, panGestureHandlerCustomNativeProps } from \"../PanGestureHandler\";\nimport { tapGestureHandlerProps } from \"../TapGestureHandler\";\nimport { State } from \"../../State\";\nimport { EventType } from \"../../EventType\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { onGestureHandlerEvent as _onGestureHandlerEvent } from \"./eventReceiver\";\nvar ALLOWED_PROPS = [].concat(_toConsumableArray(baseGestureHandlerWithMonitorProps), _toConsumableArray(tapGestureHandlerProps), _toConsumableArray(panGestureHandlerProps), _toConsumableArray(panGestureHandlerCustomNativeProps), _toConsumableArray(longPressGestureHandlerProps), _toConsumableArray(forceTouchGestureHandlerProps), _toConsumableArray(flingGestureHandlerProps));\nfunction convertToHandlerTag(ref) {\n  if (typeof ref === 'number') {\n    return ref;\n  } else if (ref instanceof BaseGesture) {\n    return ref.handlerTag;\n  } else {\n    var _ref$current$handlerT, _ref$current;\n    return (_ref$current$handlerT = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.handlerTag) !== null && _ref$current$handlerT !== void 0 ? _ref$current$handlerT : -1;\n  }\n}\nfunction extractValidHandlerTags(interactionGroup) {\n  var _interactionGroup$map, _interactionGroup$map2;\n  return (_interactionGroup$map = interactionGroup === null || interactionGroup === void 0 ? void 0 : (_interactionGroup$map2 = interactionGroup.map(convertToHandlerTag)) === null || _interactionGroup$map2 === void 0 ? void 0 : _interactionGroup$map2.filter(function (tag) {\n    return tag > 0;\n  })) !== null && _interactionGroup$map !== void 0 ? _interactionGroup$map : [];\n}\nfunction dropHandlers(preparedGesture) {\n  for (var _iterator = _createForOfIteratorHelperLoose(preparedGesture.config), _step; !(_step = _iterator()).done;) {\n    var handler = _step.value;\n    RNGestureHandlerModule.dropGestureHandler(handler.handlerTag);\n    unregisterHandler(handler.handlerTag);\n  }\n}\nfunction attachHandlers(_ref) {\n  var preparedGesture = _ref.preparedGesture,\n    gestureConfig = _ref.gestureConfig,\n    gesture = _ref.gesture,\n    viewTag = _ref.viewTag,\n    useAnimated = _ref.useAnimated,\n    webEventHandlersRef = _ref.webEventHandlersRef;\n  if (!preparedGesture.firstExecution) {\n    gestureConfig === null || gestureConfig === void 0 ? void 0 : gestureConfig.initialize();\n  } else {\n    preparedGesture.firstExecution = false;\n  }\n  setImmediate(function () {\n    gestureConfig === null || gestureConfig === void 0 ? void 0 : gestureConfig.prepare();\n  });\n  var _loop = function _loop(handler) {\n    RNGestureHandlerModule.createGestureHandler(handler.handlerName, handler.handlerTag, filterConfig(handler.config, ALLOWED_PROPS));\n    registerHandler(handler.handlerTag, handler);\n    setImmediate(function () {\n      var requireToFail = [];\n      if (handler.config.requireToFail) {\n        requireToFail = extractValidHandlerTags(handler.config.requireToFail);\n      }\n      var simultaneousWith = [];\n      if (handler.config.simultaneousWith) {\n        simultaneousWith = extractValidHandlerTags(handler.config.simultaneousWith);\n      }\n      RNGestureHandlerModule.updateGestureHandler(handler.handlerTag, filterConfig(handler.config, ALLOWED_PROPS, {\n        simultaneousHandlers: simultaneousWith,\n        waitFor: requireToFail\n      }));\n    });\n  };\n  for (var _iterator2 = _createForOfIteratorHelperLoose(gesture), _step2; !(_step2 = _iterator2()).done;) {\n    var handler = _step2.value;\n    _loop(handler);\n  }\n  preparedGesture.config = gesture;\n  for (var _iterator3 = _createForOfIteratorHelperLoose(preparedGesture.config), _step3; !(_step3 = _iterator3()).done;) {\n    var _gesture = _step3.value;\n    if (Platform.OS === 'web') {\n      RNGestureHandlerModule.attachGestureHandler(_gesture.handlerTag, viewTag, !useAnimated, webEventHandlersRef);\n    } else {\n      RNGestureHandlerModule.attachGestureHandler(_gesture.handlerTag, viewTag, !useAnimated);\n    }\n  }\n  if (preparedGesture.animatedHandlers) {\n    preparedGesture.animatedHandlers.value = gesture.map(function (g) {\n      return g.handlers;\n    });\n  }\n}\nfunction updateHandlers(preparedGesture, gestureConfig, gesture) {\n  gestureConfig === null || gestureConfig === void 0 ? void 0 : gestureConfig.prepare();\n  for (var i = 0; i < gesture.length; i++) {\n    var handler = preparedGesture.config[i];\n    if (gesture[i].handlerTag !== handler.handlerTag) {\n      gesture[i].handlerTag = handler.handlerTag;\n      gesture[i].handlers.handlerTag = handler.handlerTag;\n    }\n  }\n  setImmediate(function () {\n    for (var _i = 0; _i < gesture.length; _i++) {\n      var _handler = preparedGesture.config[_i];\n      _handler.config = gesture[_i].config;\n      _handler.handlers = gesture[_i].handlers;\n      var requireToFail = extractValidHandlerTags(_handler.config.requireToFail);\n      var simultaneousWith = extractValidHandlerTags(_handler.config.simultaneousWith);\n      RNGestureHandlerModule.updateGestureHandler(_handler.handlerTag, filterConfig(_handler.config, ALLOWED_PROPS, {\n        simultaneousHandlers: simultaneousWith,\n        waitFor: requireToFail\n      }));\n      registerHandler(_handler.handlerTag, _handler);\n    }\n    if (preparedGesture.animatedHandlers) {\n      preparedGesture.animatedHandlers.value = preparedGesture.config.map(function (g) {\n        return g.handlers;\n      });\n    }\n  });\n}\nfunction needsToReattach(preparedGesture, gesture) {\n  if (gesture.length !== preparedGesture.config.length) {\n    return true;\n  }\n  for (var i = 0; i < gesture.length; i++) {\n    if (gesture[i].handlerName !== preparedGesture.config[i].handlerName) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction useAnimatedGesture(preparedGesture, needsRebuild) {\n  if (!Reanimated) {\n    return;\n  }\n  function isStateChangeEvent(event) {\n    'worklet';\n    return event.oldState != null;\n  }\n  function isTouchEvent(event) {\n    'worklet';\n\n    return event.eventType != null;\n  }\n  function getHandler(type, gesture) {\n    'worklet';\n\n    switch (type) {\n      case CALLBACK_TYPE.BEGAN:\n        return gesture.onBegin;\n      case CALLBACK_TYPE.START:\n        return gesture.onStart;\n      case CALLBACK_TYPE.UPDATE:\n        return gesture.onUpdate;\n      case CALLBACK_TYPE.CHANGE:\n        return gesture.onChange;\n      case CALLBACK_TYPE.END:\n        return gesture.onEnd;\n      case CALLBACK_TYPE.FINALIZE:\n        return gesture.onFinalize;\n      case CALLBACK_TYPE.TOUCHES_DOWN:\n        return gesture.onTouchesDown;\n      case CALLBACK_TYPE.TOUCHES_MOVE:\n        return gesture.onTouchesMove;\n      case CALLBACK_TYPE.TOUCHES_UP:\n        return gesture.onTouchesUp;\n      case CALLBACK_TYPE.TOUCHES_CANCELLED:\n        return gesture.onTouchesCancelled;\n    }\n  }\n  function touchEventTypeToCallbackType(eventType) {\n    'worklet';\n\n    switch (eventType) {\n      case EventType.TOUCHES_DOWN:\n        return CALLBACK_TYPE.TOUCHES_DOWN;\n      case EventType.TOUCHES_MOVE:\n        return CALLBACK_TYPE.TOUCHES_MOVE;\n      case EventType.TOUCHES_UP:\n        return CALLBACK_TYPE.TOUCHES_UP;\n      case EventType.TOUCHES_CANCELLED:\n        return CALLBACK_TYPE.TOUCHES_CANCELLED;\n    }\n    return CALLBACK_TYPE.UNDEFINED;\n  }\n  function runWorklet(type, gesture, event) {\n    'worklet';\n\n    var handler = getHandler(type, gesture);\n    if (gesture.isWorklet[type]) {\n      for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n        args[_key - 3] = arguments[_key];\n      }\n      handler === null || handler === void 0 ? void 0 : handler.apply(void 0, [event].concat(args));\n    } else if (handler) {\n      console.warn('Animated gesture callback must be a worklet');\n    }\n  }\n  var sharedHandlersCallbacks = Reanimated.useSharedValue(null);\n  var lastUpdateEvent = Reanimated.useSharedValue([]);\n  var stateControllers = [];\n  var callback = function callback(event) {\n    'worklet';\n\n    var currentCallback = sharedHandlersCallbacks.value;\n    if (!currentCallback) {\n      return;\n    }\n    for (var i = 0; i < currentCallback.length; i++) {\n      var gesture = currentCallback[i];\n      if (event.handlerTag === gesture.handlerTag) {\n        if (isStateChangeEvent(event)) {\n          if (event.oldState === State.UNDETERMINED && event.state === State.BEGAN) {\n            runWorklet(CALLBACK_TYPE.BEGAN, gesture, event);\n          } else if ((event.oldState === State.BEGAN || event.oldState === State.UNDETERMINED) && event.state === State.ACTIVE) {\n            runWorklet(CALLBACK_TYPE.START, gesture, event);\n            lastUpdateEvent.value[gesture.handlerTag] = undefined;\n          } else if (event.oldState !== event.state && event.state === State.END) {\n            if (event.oldState === State.ACTIVE) {\n              runWorklet(CALLBACK_TYPE.END, gesture, event, true);\n            }\n            runWorklet(CALLBACK_TYPE.FINALIZE, gesture, event, true);\n          } else if ((event.state === State.FAILED || event.state === State.CANCELLED) && event.state !== event.oldState) {\n            if (event.oldState === State.ACTIVE) {\n              runWorklet(CALLBACK_TYPE.END, gesture, event, false);\n            }\n            runWorklet(CALLBACK_TYPE.FINALIZE, gesture, event, false);\n          }\n        } else if (isTouchEvent(event)) {\n          if (!stateControllers[i]) {\n            stateControllers[i] = GestureStateManager.create(event.handlerTag);\n          }\n          if (event.eventType !== EventType.UNDETERMINED) {\n            runWorklet(touchEventTypeToCallbackType(event.eventType), gesture, event, stateControllers[i]);\n          }\n        } else {\n          runWorklet(CALLBACK_TYPE.UPDATE, gesture, event);\n          if (gesture.onChange && gesture.changeEventCalculator) {\n            var _gesture$changeEventC;\n            runWorklet(CALLBACK_TYPE.CHANGE, gesture, (_gesture$changeEventC = gesture.changeEventCalculator) === null || _gesture$changeEventC === void 0 ? void 0 : _gesture$changeEventC.call(gesture, event, lastUpdateEvent.value[gesture.handlerTag]));\n            lastUpdateEvent.value[gesture.handlerTag] = event;\n          }\n        }\n      }\n    }\n  };\n  var event = Reanimated.useEvent(callback, ['onGestureHandlerStateChange', 'onGestureHandlerEvent'], needsRebuild);\n  preparedGesture.animatedEventHandler = event;\n  preparedGesture.animatedHandlers = sharedHandlersCallbacks;\n}\nexport var GestureDetector = function GestureDetector(props) {\n  var _gestureConfig$toGest, _gestureConfig$toGest2;\n  var gestureConfig = props.gesture;\n  var gesture = (_gestureConfig$toGest = gestureConfig === null || gestureConfig === void 0 ? void 0 : (_gestureConfig$toGest2 = gestureConfig.toGestureArray) === null || _gestureConfig$toGest2 === void 0 ? void 0 : _gestureConfig$toGest2.call(gestureConfig)) !== null && _gestureConfig$toGest !== void 0 ? _gestureConfig$toGest : [];\n  var useAnimated = gesture.find(function (gesture) {\n    return gesture.handlers.isWorklet.reduce(function (prev, current) {\n      return prev || current;\n    });\n  }) != null;\n  var viewRef = useRef(null);\n  var firstRenderRef = useRef(true);\n  var webEventHandlersRef = useRef({\n    onGestureHandlerEvent: function onGestureHandlerEvent(e) {\n      _onGestureHandlerEvent(e.nativeEvent);\n    }\n  });\n  var preparedGesture = React.useRef({\n    config: gesture,\n    animatedEventHandler: null,\n    animatedHandlers: null,\n    firstExecution: true,\n    useAnimated: useAnimated\n  }).current;\n  if (useAnimated !== preparedGesture.useAnimated) {\n    throw new Error('You cannot change whether you are using gesture or animatedGesture while the app is running');\n  }\n  var needsToRebuildReanimatedEvent = preparedGesture.firstExecution || needsToReattach(preparedGesture, gesture);\n  if (preparedGesture.firstExecution) {\n    var _gestureConfig$initia;\n    gestureConfig === null || gestureConfig === void 0 ? void 0 : (_gestureConfig$initia = gestureConfig.initialize) === null || _gestureConfig$initia === void 0 ? void 0 : _gestureConfig$initia.call(gestureConfig);\n  }\n  if (useAnimated) {\n    useAnimatedGesture(preparedGesture, needsToRebuildReanimatedEvent);\n  }\n  useEffect(function () {\n    firstRenderRef.current = true;\n    var viewTag = findNodeHandle(viewRef.current);\n    attachHandlers({\n      preparedGesture: preparedGesture,\n      gestureConfig: gestureConfig,\n      gesture: gesture,\n      viewTag: viewTag,\n      useAnimated: useAnimated,\n      webEventHandlersRef: webEventHandlersRef\n    });\n    return function () {\n      dropHandlers(preparedGesture);\n    };\n  }, []);\n  useEffect(function () {\n    if (!firstRenderRef.current) {\n      var viewTag = findNodeHandle(viewRef.current);\n      if (needsToReattach(preparedGesture, gesture)) {\n        dropHandlers(preparedGesture);\n        attachHandlers({\n          preparedGesture: preparedGesture,\n          gestureConfig: gestureConfig,\n          gesture: gesture,\n          viewTag: viewTag,\n          useAnimated: useAnimated,\n          webEventHandlersRef: webEventHandlersRef\n        });\n      } else {\n        updateHandlers(preparedGesture, gestureConfig, gesture);\n      }\n    } else {\n      firstRenderRef.current = false;\n    }\n  }, [props]);\n  if (useAnimated) {\n    return React.createElement(AnimatedWrap, {\n      ref: viewRef,\n      onGestureHandlerEvent: preparedGesture.animatedEventHandler\n    }, props.children);\n  } else {\n    return React.createElement(Wrap, {\n      ref: viewRef\n    }, props.children);\n  }\n};\nvar Wrap = function (_React$Component) {\n  _inherits(Wrap, _React$Component);\n  var _super = _createSuper(Wrap);\n  function Wrap() {\n    _classCallCheck(this, Wrap);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Wrap, [{\n    key: \"render\",\n    value: function render() {\n      var child = React.Children.only(this.props.children);\n      return React.cloneElement(child, {\n        collapsable: false\n      }, child.props.children);\n    }\n  }]);\n  return Wrap;\n}(React.Component);\nvar AnimatedWrap = (_Reanimated$default$c = Reanimated === null || Reanimated === void 0 ? void 0 : (_Reanimated$default = Reanimated.default) === null || _Reanimated$default === void 0 ? void 0 : _Reanimated$default.createAnimatedComponent(Wrap)) !== null && _Reanimated$default$c !== void 0 ? _Reanimated$default$c : Wrap;","map":{"version":3,"sources":["GestureDetector.tsx"],"names":["React","useEffect","useRef","BaseGesture","CALLBACK_TYPE","Reanimated","registerHandler","unregisterHandler","RNGestureHandlerModule","baseGestureHandlerWithMonitorProps","filterConfig","findNodeHandle","GestureStateManager","flingGestureHandlerProps","forceTouchGestureHandlerProps","longPressGestureHandlerProps","panGestureHandlerProps","panGestureHandlerCustomNativeProps","tapGestureHandlerProps","State","EventType","onGestureHandlerEvent","ALLOWED_PROPS","convertToHandlerTag","ref","handlerTag","current","extractValidHandlerTags","interactionGroup","map","filter","tag","dropHandlers","preparedGesture","handler","config","dropGestureHandler","attachHandlers","gestureConfig","gesture","viewTag","useAnimated","webEventHandlersRef","firstExecution","initialize","setImmediate","prepare","createGestureHandler","handlerName","requireToFail","simultaneousWith","updateGestureHandler","simultaneousHandlers","waitFor","Platform","OS","attachGestureHandler","animatedHandlers","value","g","handlers","updateHandlers","i","length","needsToReattach","useAnimatedGesture","needsRebuild","isStateChangeEvent","event","oldState","isTouchEvent","eventType","getHandler","type","BEGAN","onBegin","START","onStart","UPDATE","onUpdate","CHANGE","onChange","END","onEnd","FINALIZE","onFinalize","TOUCHES_DOWN","onTouchesDown","TOUCHES_MOVE","onTouchesMove","TOUCHES_UP","onTouchesUp","TOUCHES_CANCELLED","onTouchesCancelled","touchEventTypeToCallbackType","UNDEFINED","runWorklet","args","isWorklet","console","warn","sharedHandlersCallbacks","useSharedValue","lastUpdateEvent","stateControllers","callback","currentCallback","UNDETERMINED","state","ACTIVE","undefined","FAILED","CANCELLED","create","changeEventCalculator","useEvent","animatedEventHandler","GestureDetector","props","toGestureArray","find","reduce","prev","viewRef","firstRenderRef","e","nativeEvent","Error","needsToRebuildReanimatedEvent","children","Wrap","Component","render","child","Children","only","cloneElement","collapsable","AnimatedWrap","default","createAnimatedComponent"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport {\n  GestureType,\n  HandlerCallbacks,\n  BaseGesture,\n  GestureRef,\n  CALLBACK_TYPE,\n} from './gesture';\nimport { Reanimated, SharedValue } from './reanimatedWrapper';\nimport { registerHandler, unregisterHandler } from '../handlersRegistry';\nimport RNGestureHandlerModule from '../../RNGestureHandlerModule';\nimport {\n  baseGestureHandlerWithMonitorProps,\n  filterConfig,\n  findNodeHandle,\n  GestureTouchEvent,\n  GestureUpdateEvent,\n  GestureStateChangeEvent,\n  HandlerStateChangeEvent,\n} from '../gestureHandlerCommon';\nimport {\n  GestureStateManager,\n  GestureStateManagerType,\n} from './gestureStateManager';\nimport { flingGestureHandlerProps } from '../FlingGestureHandler';\nimport { forceTouchGestureHandlerProps } from '../ForceTouchGestureHandler';\nimport { longPressGestureHandlerProps } from '../LongPressGestureHandler';\nimport {\n  panGestureHandlerProps,\n  panGestureHandlerCustomNativeProps,\n} from '../PanGestureHandler';\nimport { tapGestureHandlerProps } from '../TapGestureHandler';\nimport { State } from '../../State';\nimport { EventType } from '../../EventType';\nimport { ComposedGesture } from './gestureComposition';\nimport { Platform } from 'react-native';\nimport type RNGestureHandlerModuleWeb from '../../RNGestureHandlerModule.web';\nimport { onGestureHandlerEvent } from './eventReceiver';\n\nconst ALLOWED_PROPS = [\n  ...baseGestureHandlerWithMonitorProps,\n  ...tapGestureHandlerProps,\n  ...panGestureHandlerProps,\n  ...panGestureHandlerCustomNativeProps,\n  ...longPressGestureHandlerProps,\n  ...forceTouchGestureHandlerProps,\n  ...flingGestureHandlerProps,\n];\n\nexport type GestureConfigReference = {\n  config: GestureType[];\n  animatedEventHandler: unknown;\n  animatedHandlers: SharedValue<\n    HandlerCallbacks<Record<string, unknown>>[] | null\n  > | null;\n  firstExecution: boolean;\n  useAnimated: boolean;\n};\n\nfunction convertToHandlerTag(ref: GestureRef): number {\n  if (typeof ref === 'number') {\n    return ref;\n  } else if (ref instanceof BaseGesture) {\n    return ref.handlerTag;\n  } else {\n    // @ts-ignore in this case it should be a ref either to gesture object or\n    // a gesture handler component, in both cases handlerTag property exists\n    return ref.current?.handlerTag ?? -1;\n  }\n}\n\nfunction extractValidHandlerTags(interactionGroup: GestureRef[] | undefined) {\n  return (\n    interactionGroup?.map(convertToHandlerTag)?.filter((tag) => tag > 0) ?? []\n  );\n}\n\nfunction dropHandlers(preparedGesture: GestureConfigReference) {\n  for (const handler of preparedGesture.config) {\n    RNGestureHandlerModule.dropGestureHandler(handler.handlerTag);\n\n    unregisterHandler(handler.handlerTag);\n  }\n}\n\ninterface WebEventHandler {\n  onGestureHandlerEvent: (event: HandlerStateChangeEvent<unknown>) => void;\n}\n\ninterface AttachHandlersConfig {\n  preparedGesture: GestureConfigReference;\n  gestureConfig: ComposedGesture | GestureType | undefined;\n  gesture: GestureType[];\n  viewTag: number;\n  useAnimated: boolean;\n  webEventHandlersRef: React.RefObject<WebEventHandler>;\n}\n\nfunction attachHandlers({\n  preparedGesture,\n  gestureConfig,\n  gesture,\n  viewTag,\n  useAnimated,\n  webEventHandlersRef,\n}: AttachHandlersConfig) {\n  if (!preparedGesture.firstExecution) {\n    gestureConfig?.initialize();\n  } else {\n    preparedGesture.firstExecution = false;\n  }\n\n  // use setImmediate to extract handlerTags, because all refs should be initialized\n  // when it's ran\n  setImmediate(() => {\n    gestureConfig?.prepare();\n  });\n\n  for (const handler of gesture) {\n    RNGestureHandlerModule.createGestureHandler(\n      handler.handlerName,\n      handler.handlerTag,\n      filterConfig(handler.config, ALLOWED_PROPS)\n    );\n\n    registerHandler(handler.handlerTag, handler);\n\n    // use setImmediate to extract handlerTags, because all refs should be initialized\n    // when it's ran\n    setImmediate(() => {\n      let requireToFail: number[] = [];\n      if (handler.config.requireToFail) {\n        requireToFail = extractValidHandlerTags(handler.config.requireToFail);\n      }\n\n      let simultaneousWith: number[] = [];\n      if (handler.config.simultaneousWith) {\n        simultaneousWith = extractValidHandlerTags(\n          handler.config.simultaneousWith\n        );\n      }\n\n      RNGestureHandlerModule.updateGestureHandler(\n        handler.handlerTag,\n        filterConfig(handler.config, ALLOWED_PROPS, {\n          simultaneousHandlers: simultaneousWith,\n          waitFor: requireToFail,\n        })\n      );\n    });\n  }\n  preparedGesture.config = gesture;\n\n  for (const gesture of preparedGesture.config) {\n    if (Platform.OS === 'web') {\n      (RNGestureHandlerModule.attachGestureHandler as typeof RNGestureHandlerModuleWeb.attachGestureHandler)(\n        gesture.handlerTag,\n        viewTag,\n        !useAnimated, // send direct events when using animatedGesture, device events otherwise\n        webEventHandlersRef\n      );\n    } else {\n      RNGestureHandlerModule.attachGestureHandler(\n        gesture.handlerTag,\n        viewTag,\n        !useAnimated // send direct events when using animatedGesture, device events otherwise\n      );\n    }\n  }\n\n  if (preparedGesture.animatedHandlers) {\n    preparedGesture.animatedHandlers.value = (gesture.map(\n      (g) => g.handlers\n    ) as unknown) as HandlerCallbacks<Record<string, unknown>>[];\n  }\n}\n\nfunction updateHandlers(\n  preparedGesture: GestureConfigReference,\n  gestureConfig: ComposedGesture | GestureType | undefined,\n  gesture: GestureType[]\n) {\n  gestureConfig?.prepare();\n\n  for (let i = 0; i < gesture.length; i++) {\n    const handler = preparedGesture.config[i];\n\n    // only update handlerTag when it's actually different, it may be the same\n    // if gesture config object is wrapped with useMemo\n    if (gesture[i].handlerTag !== handler.handlerTag) {\n      gesture[i].handlerTag = handler.handlerTag;\n      gesture[i].handlers.handlerTag = handler.handlerTag;\n    }\n  }\n\n  // use setImmediate to extract handlerTags, because when it's ran, all refs should be updated\n  // and handlerTags in BaseGesture references should be updated in the loop above (we need to wait\n  // in case of external relations)\n  setImmediate(() => {\n    for (let i = 0; i < gesture.length; i++) {\n      const handler = preparedGesture.config[i];\n\n      handler.config = gesture[i].config;\n      handler.handlers = gesture[i].handlers;\n\n      const requireToFail = extractValidHandlerTags(\n        handler.config.requireToFail\n      );\n\n      const simultaneousWith = extractValidHandlerTags(\n        handler.config.simultaneousWith\n      );\n\n      RNGestureHandlerModule.updateGestureHandler(\n        handler.handlerTag,\n        filterConfig(handler.config, ALLOWED_PROPS, {\n          simultaneousHandlers: simultaneousWith,\n          waitFor: requireToFail,\n        })\n      );\n\n      registerHandler(handler.handlerTag, handler);\n    }\n\n    if (preparedGesture.animatedHandlers) {\n      preparedGesture.animatedHandlers.value = (preparedGesture.config.map(\n        (g) => g.handlers\n      ) as unknown) as HandlerCallbacks<Record<string, unknown>>[];\n    }\n  });\n}\n\nfunction needsToReattach(\n  preparedGesture: GestureConfigReference,\n  gesture: GestureType[]\n) {\n  if (gesture.length !== preparedGesture.config.length) {\n    return true;\n  }\n  for (let i = 0; i < gesture.length; i++) {\n    if (gesture[i].handlerName !== preparedGesture.config[i].handlerName) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction useAnimatedGesture(\n  preparedGesture: GestureConfigReference,\n  needsRebuild: boolean\n) {\n  if (!Reanimated) {\n    return;\n  }\n\n  function isStateChangeEvent(\n    event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n  ): event is GestureStateChangeEvent {\n    'worklet';\n    // @ts-ignore Yes, the oldState prop is missing on GestureTouchEvent, that's the point\n    return event.oldState != null;\n  }\n\n  function isTouchEvent(\n    event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n  ): event is GestureTouchEvent {\n    'worklet';\n    return event.eventType != null;\n  }\n\n  function getHandler(\n    type: CALLBACK_TYPE,\n    gesture: HandlerCallbacks<Record<string, unknown>>\n  ) {\n    'worklet';\n    switch (type) {\n      case CALLBACK_TYPE.BEGAN:\n        return gesture.onBegin;\n      case CALLBACK_TYPE.START:\n        return gesture.onStart;\n      case CALLBACK_TYPE.UPDATE:\n        return gesture.onUpdate;\n      case CALLBACK_TYPE.CHANGE:\n        return gesture.onChange;\n      case CALLBACK_TYPE.END:\n        return gesture.onEnd;\n      case CALLBACK_TYPE.FINALIZE:\n        return gesture.onFinalize;\n      case CALLBACK_TYPE.TOUCHES_DOWN:\n        return gesture.onTouchesDown;\n      case CALLBACK_TYPE.TOUCHES_MOVE:\n        return gesture.onTouchesMove;\n      case CALLBACK_TYPE.TOUCHES_UP:\n        return gesture.onTouchesUp;\n      case CALLBACK_TYPE.TOUCHES_CANCELLED:\n        return gesture.onTouchesCancelled;\n    }\n  }\n\n  function touchEventTypeToCallbackType(eventType: EventType): CALLBACK_TYPE {\n    'worklet';\n    switch (eventType) {\n      case EventType.TOUCHES_DOWN:\n        return CALLBACK_TYPE.TOUCHES_DOWN;\n      case EventType.TOUCHES_MOVE:\n        return CALLBACK_TYPE.TOUCHES_MOVE;\n      case EventType.TOUCHES_UP:\n        return CALLBACK_TYPE.TOUCHES_UP;\n      case EventType.TOUCHES_CANCELLED:\n        return CALLBACK_TYPE.TOUCHES_CANCELLED;\n    }\n    return CALLBACK_TYPE.UNDEFINED;\n  }\n\n  function runWorklet(\n    type: CALLBACK_TYPE,\n    gesture: HandlerCallbacks<Record<string, unknown>>,\n    event: GestureStateChangeEvent | GestureUpdateEvent | GestureTouchEvent,\n    ...args: any[]\n  ) {\n    'worklet';\n    const handler = getHandler(type, gesture);\n    if (gesture.isWorklet[type]) {\n      // @ts-ignore Logic below makes sure the correct event is send to the\n      // correct handler.\n      handler?.(event, ...args);\n    } else if (handler) {\n      console.warn('Animated gesture callback must be a worklet');\n    }\n  }\n\n  // Hooks are called conditionally, but the condition is whether the\n  // react-native-reanimated is installed, which shouldn't change while running\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const sharedHandlersCallbacks = Reanimated.useSharedValue<\n    HandlerCallbacks<Record<string, unknown>>[] | null\n  >(null);\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const lastUpdateEvent = Reanimated.useSharedValue<\n    (GestureUpdateEvent | undefined)[]\n  >([]);\n\n  // not every gesture needs a state controller, init them lazily\n  const stateControllers: GestureStateManagerType[] = [];\n\n  const callback = (\n    event: GestureStateChangeEvent | GestureUpdateEvent | GestureTouchEvent\n  ) => {\n    'worklet';\n\n    const currentCallback = sharedHandlersCallbacks.value;\n    if (!currentCallback) {\n      return;\n    }\n\n    for (let i = 0; i < currentCallback.length; i++) {\n      const gesture = currentCallback[i];\n\n      if (event.handlerTag === gesture.handlerTag) {\n        if (isStateChangeEvent(event)) {\n          if (\n            event.oldState === State.UNDETERMINED &&\n            event.state === State.BEGAN\n          ) {\n            runWorklet(CALLBACK_TYPE.BEGAN, gesture, event);\n          } else if (\n            (event.oldState === State.BEGAN ||\n              event.oldState === State.UNDETERMINED) &&\n            event.state === State.ACTIVE\n          ) {\n            runWorklet(CALLBACK_TYPE.START, gesture, event);\n            lastUpdateEvent.value[gesture.handlerTag] = undefined;\n          } else if (\n            event.oldState !== event.state &&\n            event.state === State.END\n          ) {\n            if (event.oldState === State.ACTIVE) {\n              runWorklet(CALLBACK_TYPE.END, gesture, event, true);\n            }\n            runWorklet(CALLBACK_TYPE.FINALIZE, gesture, event, true);\n          } else if (\n            (event.state === State.FAILED || event.state === State.CANCELLED) &&\n            event.state !== event.oldState\n          ) {\n            if (event.oldState === State.ACTIVE) {\n              runWorklet(CALLBACK_TYPE.END, gesture, event, false);\n            }\n            runWorklet(CALLBACK_TYPE.FINALIZE, gesture, event, false);\n          }\n        } else if (isTouchEvent(event)) {\n          if (!stateControllers[i]) {\n            stateControllers[i] = GestureStateManager.create(event.handlerTag);\n          }\n\n          if (event.eventType !== EventType.UNDETERMINED) {\n            runWorklet(\n              touchEventTypeToCallbackType(event.eventType),\n              gesture,\n              event,\n              stateControllers[i]\n            );\n          }\n        } else {\n          runWorklet(CALLBACK_TYPE.UPDATE, gesture, event);\n\n          if (gesture.onChange && gesture.changeEventCalculator) {\n            runWorklet(\n              CALLBACK_TYPE.CHANGE,\n              gesture,\n              gesture.changeEventCalculator?.(\n                event,\n                lastUpdateEvent.value[gesture.handlerTag]\n              )\n            );\n\n            lastUpdateEvent.value[gesture.handlerTag] = event;\n          }\n        }\n      }\n    }\n  };\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const event = Reanimated.useEvent(\n    callback,\n    ['onGestureHandlerStateChange', 'onGestureHandlerEvent'],\n    needsRebuild\n  );\n\n  preparedGesture.animatedEventHandler = event;\n  preparedGesture.animatedHandlers = sharedHandlersCallbacks;\n}\n\ninterface GestureDetectorProps {\n  gesture?: ComposedGesture | GestureType;\n}\nexport const GestureDetector: React.FunctionComponent<GestureDetectorProps> = (\n  props\n) => {\n  const gestureConfig = props.gesture;\n  const gesture = gestureConfig?.toGestureArray?.() ?? [];\n  const useAnimated =\n    gesture.find((gesture) =>\n      gesture.handlers.isWorklet.reduce((prev, current) => prev || current)\n    ) != null;\n  const viewRef = useRef(null);\n  const firstRenderRef = useRef(true);\n  const webEventHandlersRef = useRef<WebEventHandler>({\n    onGestureHandlerEvent: (e: HandlerStateChangeEvent<unknown>) => {\n      onGestureHandlerEvent(e.nativeEvent);\n    },\n  });\n\n  const preparedGesture = React.useRef<GestureConfigReference>({\n    config: gesture,\n    animatedEventHandler: null,\n    animatedHandlers: null,\n    firstExecution: true,\n    useAnimated: useAnimated,\n  }).current;\n\n  if (useAnimated !== preparedGesture.useAnimated) {\n    throw new Error(\n      'You cannot change whether you are using gesture or animatedGesture while the app is running'\n    );\n  }\n\n  // Reanimated event should be rebuilt only when gestures are reattached, otherwise\n  // config update will be enough as all necessary items are stored in shared values anyway\n  const needsToRebuildReanimatedEvent =\n    preparedGesture.firstExecution || needsToReattach(preparedGesture, gesture);\n\n  if (preparedGesture.firstExecution) {\n    gestureConfig?.initialize?.();\n  }\n\n  if (useAnimated) {\n    // Whether animatedGesture or gesture is used shouldn't change\n    // during while an app is running\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useAnimatedGesture(preparedGesture, needsToRebuildReanimatedEvent);\n  }\n\n  useEffect(() => {\n    firstRenderRef.current = true;\n    const viewTag = findNodeHandle(viewRef.current) as number;\n    attachHandlers({\n      preparedGesture,\n      gestureConfig,\n      gesture,\n      viewTag,\n      useAnimated,\n      webEventHandlersRef,\n    });\n\n    return () => {\n      dropHandlers(preparedGesture);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!firstRenderRef.current) {\n      const viewTag = findNodeHandle(viewRef.current) as number;\n\n      if (needsToReattach(preparedGesture, gesture)) {\n        dropHandlers(preparedGesture);\n        attachHandlers({\n          preparedGesture,\n          gestureConfig,\n          gesture,\n          viewTag,\n          useAnimated,\n          webEventHandlersRef,\n        });\n      } else {\n        updateHandlers(preparedGesture, gestureConfig, gesture);\n      }\n    } else {\n      firstRenderRef.current = false;\n    }\n  }, [props]);\n\n  if (useAnimated) {\n    return (\n      <AnimatedWrap\n        ref={viewRef}\n        onGestureHandlerEvent={preparedGesture.animatedEventHandler}>\n        {props.children}\n      </AnimatedWrap>\n    );\n  } else {\n    return <Wrap ref={viewRef}>{props.children}</Wrap>;\n  }\n};\n\nclass Wrap extends React.Component<{ onGestureHandlerEvent?: unknown }> {\n  render() {\n    // I don't think that fighting with types over such a simple function is worth it\n    // The only thing it does is add 'collapsable: false' to the child component\n    // to make sure it is in the native view hierarchy so the detector can find\n    // correct viewTag to attach to.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const child: any = React.Children.only(this.props.children);\n\n    return React.cloneElement(\n      child,\n      { collapsable: false },\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      child.props.children\n    );\n  }\n}\n\nconst AnimatedWrap = Reanimated?.default?.createAnimatedComponent(Wrap) ?? Wrap;\n"]},"metadata":{},"sourceType":"module"}