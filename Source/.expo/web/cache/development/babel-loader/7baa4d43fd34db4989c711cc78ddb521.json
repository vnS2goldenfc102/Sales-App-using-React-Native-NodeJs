{"ast":null,"code":"import mergeOptions from 'merge-options';\nvar merge = mergeOptions.bind({\n  concatArrays: true,\n  ignoreUndefined: true\n});\nfunction mergeLocalStorageItem(key, value) {\n  var oldValue = window.localStorage.getItem(key);\n  if (oldValue) {\n    var oldObject = JSON.parse(oldValue);\n    var newObject = JSON.parse(value);\n    var nextValue = JSON.stringify(merge(oldObject, newObject));\n    window.localStorage.setItem(key, nextValue);\n  } else {\n    window.localStorage.setItem(key, value);\n  }\n}\nfunction createPromise(getValue, callback) {\n  return new Promise(function (resolve, reject) {\n    try {\n      var value = getValue();\n      callback === null || callback === void 0 ? void 0 : callback(null, value);\n      resolve(value);\n    } catch (err) {\n      callback === null || callback === void 0 ? void 0 : callback(err);\n      reject(err);\n    }\n  });\n}\nfunction createPromiseAll(promises, callback, processResult) {\n  return Promise.all(promises).then(function (result) {\n    var _ref;\n    var value = (_ref = processResult === null || processResult === void 0 ? void 0 : processResult(result)) != null ? _ref : null;\n    callback === null || callback === void 0 ? void 0 : callback(null, value);\n    return Promise.resolve(value);\n  }, function (errors) {\n    callback === null || callback === void 0 ? void 0 : callback(errors);\n    return Promise.reject(errors);\n  });\n}\nvar AsyncStorage = {\n  getItem: function getItem(key, callback) {\n    return createPromise(function () {\n      return window.localStorage.getItem(key);\n    }, callback);\n  },\n  setItem: function setItem(key, value, callback) {\n    return createPromise(function () {\n      return window.localStorage.setItem(key, value);\n    }, callback);\n  },\n  removeItem: function removeItem(key, callback) {\n    return createPromise(function () {\n      return window.localStorage.removeItem(key);\n    }, callback);\n  },\n  mergeItem: function mergeItem(key, value, callback) {\n    return createPromise(function () {\n      return mergeLocalStorageItem(key, value);\n    }, callback);\n  },\n  clear: function clear(callback) {\n    return createPromise(function () {\n      return window.localStorage.clear();\n    }, callback);\n  },\n  getAllKeys: function getAllKeys(callback) {\n    return createPromise(function () {\n      var numberOfKeys = window.localStorage.length;\n      var keys = [];\n      for (var i = 0; i < numberOfKeys; i += 1) {\n        var key = window.localStorage.key(i) || '';\n        keys.push(key);\n      }\n      return keys;\n    }, callback);\n  },\n  flushGetRequests: function flushGetRequests() {\n    return undefined;\n  },\n  multiGet: function multiGet(keys, callback) {\n    var promises = keys.map(function (key) {\n      return AsyncStorage.getItem(key);\n    });\n    var processResult = function processResult(result) {\n      return result.map(function (value, i) {\n        return [keys[i], value];\n      });\n    };\n    return createPromiseAll(promises, callback, processResult);\n  },\n  multiSet: function multiSet(keyValuePairs, callback) {\n    var promises = keyValuePairs.map(function (item) {\n      return AsyncStorage.setItem(item[0], item[1]);\n    });\n    return createPromiseAll(promises, callback);\n  },\n  multiRemove: function multiRemove(keys, callback) {\n    var promises = keys.map(function (key) {\n      return AsyncStorage.removeItem(key);\n    });\n    return createPromiseAll(promises, callback);\n  },\n  multiMerge: function multiMerge(keyValuePairs, callback) {\n    var promises = keyValuePairs.map(function (item) {\n      return AsyncStorage.mergeItem(item[0], item[1]);\n    });\n    return createPromiseAll(promises, callback);\n  }\n};\nexport default AsyncStorage;","map":{"version":3,"sources":["AsyncStorage.ts"],"names":["mergeOptions","merge","bind","concatArrays","ignoreUndefined","mergeLocalStorageItem","key","value","oldValue","window","localStorage","getItem","oldObject","JSON","parse","newObject","nextValue","stringify","setItem","createPromise","getValue","callback","Promise","resolve","reject","err","createPromiseAll","promises","processResult","all","then","result","errors","AsyncStorage","removeItem","mergeItem","clear","getAllKeys","numberOfKeys","length","keys","i","push","flushGetRequests","undefined","multiGet","map","multiSet","keyValuePairs","item","multiRemove","multiMerge"],"mappings":"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","sourcesContent":["/**\r\n * Copyright (c) Nicolas Gallagher.\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n// @ts-ignore Cannot find module 'merge-options' or its corresponding type declarations\r\nimport mergeOptions from 'merge-options';\r\nimport type {\r\n  AsyncStorageStatic,\r\n  MultiCallback,\r\n  MultiGetCallback,\r\n} from './types';\r\n\r\nconst merge = mergeOptions.bind({\r\n  concatArrays: true,\r\n  ignoreUndefined: true,\r\n});\r\n\r\nfunction mergeLocalStorageItem(key: string, value: string) {\r\n  const oldValue = window.localStorage.getItem(key);\r\n  if (oldValue) {\r\n    const oldObject = JSON.parse(oldValue);\r\n    const newObject = JSON.parse(value);\r\n    const nextValue = JSON.stringify(merge(oldObject, newObject));\r\n    window.localStorage.setItem(key, nextValue);\r\n  } else {\r\n    window.localStorage.setItem(key, value);\r\n  }\r\n}\r\n\r\nfunction createPromise<Result, Callback extends Function>(\r\n  getValue: () => Result,\r\n  callback?: Callback\r\n): Promise<Result> {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      const value = getValue();\r\n      callback?.(null, value);\r\n      resolve(value);\r\n    } catch (err) {\r\n      callback?.(err);\r\n      reject(err);\r\n    }\r\n  });\r\n}\r\n\r\nfunction createPromiseAll<ReturnType, Result, ResultProcessor extends Function>(\r\n  promises: Promise<Result>[],\r\n  callback?: MultiCallback | MultiGetCallback,\r\n  processResult?: ResultProcessor\r\n): Promise<ReturnType> {\r\n  return Promise.all(promises).then(\r\n    (result) => {\r\n      const value = processResult?.(result) ?? null;\r\n      callback?.(null, value);\r\n      return Promise.resolve(value);\r\n    },\r\n    (errors) => {\r\n      callback?.(errors);\r\n      return Promise.reject(errors);\r\n    }\r\n  );\r\n}\r\n\r\nconst AsyncStorage: AsyncStorageStatic = {\r\n  /**\r\n   * Fetches `key` value.\r\n   */\r\n  getItem: (key, callback) => {\r\n    return createPromise(() => window.localStorage.getItem(key), callback);\r\n  },\r\n\r\n  /**\r\n   * Sets `value` for `key`.\r\n   */\r\n  setItem: (key, value, callback) => {\r\n    return createPromise(\r\n      () => window.localStorage.setItem(key, value),\r\n      callback\r\n    );\r\n  },\r\n\r\n  /**\r\n   * Removes a `key`\r\n   */\r\n  removeItem: (key, callback) => {\r\n    return createPromise(() => window.localStorage.removeItem(key), callback);\r\n  },\r\n\r\n  /**\r\n   * Merges existing value with input value, assuming they are stringified JSON.\r\n   */\r\n  mergeItem: (key, value, callback) => {\r\n    return createPromise(() => mergeLocalStorageItem(key, value), callback);\r\n  },\r\n\r\n  /**\r\n   * Erases *all* AsyncStorage for the domain.\r\n   */\r\n  clear: (callback) => {\r\n    return createPromise(() => window.localStorage.clear(), callback);\r\n  },\r\n\r\n  /**\r\n   * Gets *all* keys known to the app, for all callers, libraries, etc.\r\n   */\r\n  getAllKeys: (callback) => {\r\n    return createPromise(() => {\r\n      const numberOfKeys = window.localStorage.length;\r\n      const keys: string[] = [];\r\n      for (let i = 0; i < numberOfKeys; i += 1) {\r\n        const key = window.localStorage.key(i) || '';\r\n        keys.push(key);\r\n      }\r\n      return keys;\r\n    }, callback);\r\n  },\r\n\r\n  /**\r\n   * (stub) Flushes any pending requests using a single batch call to get the data.\r\n   */\r\n  flushGetRequests: () => undefined,\r\n\r\n  /**\r\n   * multiGet resolves to an array of key-value pair arrays that matches the\r\n   * input format of multiSet.\r\n   *\r\n   *   multiGet(['k1', 'k2']) -> [['k1', 'val1'], ['k2', 'val2']]\r\n   */\r\n  multiGet: (keys, callback) => {\r\n    const promises = keys.map((key) => AsyncStorage.getItem(key));\r\n    const processResult = (result: string[]) =>\r\n      result.map((value, i) => [keys[i], value]);\r\n    return createPromiseAll(promises, callback, processResult);\r\n  },\r\n\r\n  /**\r\n   * Takes an array of key-value array pairs.\r\n   *   multiSet([['k1', 'val1'], ['k2', 'val2']])\r\n   */\r\n  multiSet: (keyValuePairs, callback) => {\r\n    const promises = keyValuePairs.map((item) =>\r\n      AsyncStorage.setItem(item[0], item[1])\r\n    );\r\n    return createPromiseAll(promises, callback);\r\n  },\r\n\r\n  /**\r\n   * Delete all the keys in the `keys` array.\r\n   */\r\n  multiRemove: (keys, callback) => {\r\n    const promises = keys.map((key) => AsyncStorage.removeItem(key));\r\n    return createPromiseAll(promises, callback);\r\n  },\r\n\r\n  /**\r\n   * Takes an array of key-value array pairs and merges them with existing\r\n   * values, assuming they are stringified JSON.\r\n   *\r\n   *   multiMerge([['k1', 'val1'], ['k2', 'val2']])\r\n   */\r\n  multiMerge: (keyValuePairs, callback) => {\r\n    const promises = keyValuePairs.map((item) =>\r\n      AsyncStorage.mergeItem(item[0], item[1])\r\n    );\r\n    return createPromiseAll(promises, callback);\r\n  },\r\n};\r\n\r\nexport default AsyncStorage;\r\n"]},"metadata":{},"sourceType":"module"}