{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar InternetReachability = _createClass(function InternetReachability(configuration, listener) {\n  var _this = this;\n  _classCallCheck(this, InternetReachability);\n  _defineProperty(this, \"_configuration\", void 0);\n  _defineProperty(this, \"_listener\", void 0);\n  _defineProperty(this, \"_isInternetReachable\", undefined);\n  _defineProperty(this, \"_currentInternetReachabilityCheckHandler\", null);\n  _defineProperty(this, \"_currentTimeoutHandle\", null);\n  _defineProperty(this, \"_setIsInternetReachable\", function (isInternetReachable) {\n    if (_this._isInternetReachable === isInternetReachable) {\n      return;\n    }\n    _this._isInternetReachable = isInternetReachable;\n    _this._listener(_this._isInternetReachable);\n  });\n  _defineProperty(this, \"_setExpectsConnection\", function (expectsConnection) {\n    if (_this._currentInternetReachabilityCheckHandler !== null) {\n      _this._currentInternetReachabilityCheckHandler.cancel();\n      _this._currentInternetReachabilityCheckHandler = null;\n    }\n    if (_this._currentTimeoutHandle !== null) {\n      clearTimeout(_this._currentTimeoutHandle);\n      _this._currentTimeoutHandle = null;\n    }\n    if (expectsConnection && _this._configuration.reachabilityShouldRun()) {\n      if (!_this._isInternetReachable) {\n        _this._setIsInternetReachable(null);\n      }\n      _this._currentInternetReachabilityCheckHandler = _this._checkInternetReachability();\n    } else {\n      _this._setIsInternetReachable(false);\n    }\n  });\n  _defineProperty(this, \"_checkInternetReachability\", function () {\n    var responsePromise = fetch(_this._configuration.reachabilityUrl, {\n      method: 'HEAD',\n      cache: 'no-cache'\n    });\n    var timeoutHandle;\n    var timeoutPromise = new Promise(function (_, reject) {\n      timeoutHandle = setTimeout(function () {\n        return reject('timedout');\n      }, _this._configuration.reachabilityRequestTimeout);\n    });\n    var cancel = function cancel() {};\n    var cancelPromise = new Promise(function (_, reject) {\n      cancel = function cancel() {\n        return reject('canceled');\n      };\n    });\n    var promise = Promise.race([responsePromise, timeoutPromise, cancelPromise]).then(function (response) {\n      return _this._configuration.reachabilityTest(response);\n    }).then(function (result) {\n      _this._setIsInternetReachable(result);\n      var nextTimeoutInterval = _this._isInternetReachable ? _this._configuration.reachabilityLongTimeout : _this._configuration.reachabilityShortTimeout;\n      _this._currentTimeoutHandle = setTimeout(_this._checkInternetReachability, nextTimeoutInterval);\n    }).catch(function (error) {\n      if (error !== 'canceled') {\n        _this._setIsInternetReachable(false);\n        _this._currentTimeoutHandle = setTimeout(_this._checkInternetReachability, _this._configuration.reachabilityShortTimeout);\n      }\n    }).then(function () {\n      clearTimeout(timeoutHandle);\n    }, function (error) {\n      clearTimeout(timeoutHandle);\n      throw error;\n    });\n    return {\n      promise: promise,\n      cancel: cancel\n    };\n  });\n  _defineProperty(this, \"update\", function (state) {\n    if (typeof state.isInternetReachable === 'boolean') {\n      _this._setIsInternetReachable(state.isInternetReachable);\n    } else {\n      _this._setExpectsConnection(state.isConnected);\n    }\n  });\n  _defineProperty(this, \"currentState\", function () {\n    return _this._isInternetReachable;\n  });\n  _defineProperty(this, \"tearDown\", function () {\n    if (_this._currentInternetReachabilityCheckHandler !== null) {\n      _this._currentInternetReachabilityCheckHandler.cancel();\n      _this._currentInternetReachabilityCheckHandler = null;\n    }\n    if (_this._currentTimeoutHandle !== null) {\n      clearTimeout(_this._currentTimeoutHandle);\n      _this._currentTimeoutHandle = null;\n    }\n  });\n  this._configuration = configuration;\n  this._listener = listener;\n});\nexport { InternetReachability as default };","map":{"version":3,"sources":["internetReachability.ts"],"names":["InternetReachability","undefined","constructor","configuration","listener","_configuration","_listener","isInternetReachable","_isInternetReachable","expectsConnection","_currentInternetReachabilityCheckHandler","cancel","_currentTimeoutHandle","clearTimeout","reachabilityShouldRun","_setIsInternetReachable","_checkInternetReachability","responsePromise","fetch","reachabilityUrl","method","cache","timeoutHandle","timeoutPromise","Promise","_","reject","setTimeout","reachabilityRequestTimeout","cancelPromise","promise","race","then","response","reachabilityTest","result","nextTimeoutInterval","reachabilityLongTimeout","reachabilityShortTimeout","catch","error","state","_setExpectsConnection","isConnected"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport * as Types from './types';\nimport * as PrivateTypes from './privateTypes';\n\ninterface InternetReachabilityCheckHandler {\n  promise: Promise<void>;\n  cancel: () => void;\n}\n\nexport default class InternetReachability {\n  private _configuration: Types.NetInfoConfiguration;\n  private _listener: PrivateTypes.NetInfoInternetReachabilityChangeListener;\n  private _isInternetReachable: boolean | null | undefined = undefined;\n  private _currentInternetReachabilityCheckHandler: InternetReachabilityCheckHandler | null = null;\n  private _currentTimeoutHandle: ReturnType<typeof setTimeout> | null = null;\n\n  constructor(\n    configuration: Types.NetInfoConfiguration,\n    listener: PrivateTypes.NetInfoInternetReachabilityChangeListener,\n  ) {\n    this._configuration = configuration;\n    this._listener = listener;\n  }\n\n  private _setIsInternetReachable = (\n    isInternetReachable: boolean | null,\n  ): void => {\n    if (this._isInternetReachable === isInternetReachable) {\n      return;\n    }\n\n    this._isInternetReachable = isInternetReachable;\n    this._listener(this._isInternetReachable);\n  };\n\n  private _setExpectsConnection = (expectsConnection: boolean | null): void => {\n    // Cancel any pending check\n    if (this._currentInternetReachabilityCheckHandler !== null) {\n      this._currentInternetReachabilityCheckHandler.cancel();\n      this._currentInternetReachabilityCheckHandler = null;\n    }\n    // Cancel any pending timeout\n    if (this._currentTimeoutHandle !== null) {\n      clearTimeout(this._currentTimeoutHandle);\n      this._currentTimeoutHandle = null;\n    }\n\n    if (expectsConnection && this._configuration.reachabilityShouldRun()) {\n      // If we expect a connection, start the process for finding if we have one\n      // Set the state to \"null\" if it was previously false\n      if (!this._isInternetReachable) {\n        this._setIsInternetReachable(null);\n      }\n      // Start a network request to check for internet\n      this._currentInternetReachabilityCheckHandler = this._checkInternetReachability();\n    } else {\n      // If we don't expect a connection or don't run reachability check, just change the state to \"false\"\n      this._setIsInternetReachable(false);\n    }\n  };\n\n  private _checkInternetReachability = (): InternetReachabilityCheckHandler => {\n    const responsePromise = fetch(this._configuration.reachabilityUrl, {\n      method: 'HEAD',\n      cache: 'no-cache',\n    });\n\n    // Create promise that will reject after the request timeout has been reached\n    let timeoutHandle: ReturnType<typeof setTimeout>;\n    const timeoutPromise = new Promise<Response>(\n      (_, reject): void => {\n        timeoutHandle = setTimeout(\n          (): void => reject('timedout'),\n          this._configuration.reachabilityRequestTimeout,\n        );\n      },\n    );\n\n    // Create promise that makes it possible to cancel a pending request through a reject\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    let cancel: () => void = (): void => {};\n    const cancelPromise = new Promise<Response>(\n      (_, reject): void => {\n        cancel = (): void => reject('canceled');\n      },\n    );\n\n    const promise = Promise.race([\n      responsePromise,\n      timeoutPromise,\n      cancelPromise,\n    ])\n      .then(\n        (response): Promise<boolean> => {\n          return this._configuration.reachabilityTest(response);\n        },\n      )\n      .then(\n        (result): void => {\n          this._setIsInternetReachable(result);\n          const nextTimeoutInterval = this._isInternetReachable\n            ? this._configuration.reachabilityLongTimeout\n            : this._configuration.reachabilityShortTimeout;\n          this._currentTimeoutHandle = setTimeout(\n            this._checkInternetReachability,\n            nextTimeoutInterval,\n          );\n        },\n      )\n      .catch(\n        (error: Error | 'timedout' | 'canceled'): void => {\n          if (error !== 'canceled') {\n            this._setIsInternetReachable(false);\n            this._currentTimeoutHandle = setTimeout(\n              this._checkInternetReachability,\n              this._configuration.reachabilityShortTimeout,\n            );\n          }\n        },\n      )\n      // Clear request timeout and propagate any errors\n      .then(\n        (): void => {\n          clearTimeout(timeoutHandle);\n        },\n        (error: Error): void => {\n          clearTimeout(timeoutHandle);\n          throw error;\n        },\n      );\n\n    return {\n      promise,\n      cancel,\n    };\n  };\n\n  public update = (state: PrivateTypes.NetInfoNativeModuleState): void => {\n    if (typeof state.isInternetReachable === 'boolean') {\n      this._setIsInternetReachable(state.isInternetReachable);\n    } else {\n      this._setExpectsConnection(state.isConnected);\n    }\n  };\n\n  public currentState = (): boolean | null | undefined => {\n    return this._isInternetReachable;\n  };\n\n  public tearDown = (): void => {\n    // Cancel any pending check\n    if (this._currentInternetReachabilityCheckHandler !== null) {\n      this._currentInternetReachabilityCheckHandler.cancel();\n      this._currentInternetReachabilityCheckHandler = null;\n    }\n\n    // Cancel any pending timeout\n    if (this._currentTimeoutHandle !== null) {\n      clearTimeout(this._currentTimeoutHandle);\n      this._currentTimeoutHandle = null;\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}